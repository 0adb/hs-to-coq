skip module GHC.Arr
skip module GHC.Generics
skip module GHC.Types
skip module GHC.CString
skip module GHC.Classes
skip module GHC.Magic
skip module GHC.Err
skip module GHC.IO
skip module GHC.Integer
skip module GHC.Unicode

# manual versions
# skip module GHC.Num
# skip module GHC.Char
# skip module GHC.Real
# skip module Data.Proxy
# skip module GHC.Enum
# skip module Data.Bits
# skip module Data.Type.Equality
# skip module GHC.Prim
# skip module GHC.Tuple
# skip module Data.Functor.Const
# skip module Data.IntMap
# skip module Data.IntMap.Base
# skip module Data.IntSet.Base



rename type  GHC.Tuple.() = unit
rename value GHC.Tuple.() = tt

rename type GHC.Tuple.(,) = GHC.Tuple.pair_type
rename type GHC.Tuple.(,,) = GHC.Tuple.triple_type
rename type GHC.Tuple.(,,,) = GHC.Tuple.quad_type
rename type GHC.Tuple.(,,,,) = GHC.Tuple.quint_type
rename type GHC.Tuple.(,,,,,) = GHC.Tuple.sext_type
rename type GHC.Tuple.(,,,,,,) = GHC.Tuple.sept_type


rename type  GHC.Types.[]  = list
rename value GHC.Types.[]  = nil
rename value GHC.Types.:   = cons

rename value GHC.Base.++         = Coq.Init.Datatypes.app
rename value GHC.List.concatMap  = Coq.Lists.List.flat_map
rename value GHC.Base..          = Coq.Program.Basics.compose

rename value GHC.List.foldl      = GHC.Base.foldl
rename value GHC.List.foldl'     = GHC.Base.foldl'

rename value GHC.Magic.oneShot = GHC.Base.oneShot

rename type GHC.Types.Ordering = comparison
rename value GHC.Types.EQ = Eq
rename value GHC.Types.LT = Lt
rename value GHC.Types.GT = Gt

rename type GHC.Types.* = Type
rename type GHC.Types.Word = GHC.Num.Word
rename type GHC.Types.Int = GHC.Num.Int
rename type GHC.Types.Char = GHC.Char.Char

rename type GHC.Types.Coercible = GHC.Prim.Coercible

rename type  GHC.Classes.Eq = GHC.Base.Eq_
rename value GHC.Classes.== = GHC.Base.op_zeze__
rename value GHC.Classes./= = GHC.Base.op_zsze__

rename type  GHC.Classes.Ord = GHC.Base.Ord
rename value GHC.Classes.<  = GHC.Base.op_zl__
rename value GHC.Classes.<= = GHC.Base.op_zlze__
rename value GHC.Classes.>  = GHC.Base.op_zg__
rename value GHC.Classes.>= = GHC.Base.op_zgze__
rename value GHC.Classes.max = GHC.Base.max
rename value GHC.Classes.min = GHC.Base.min
rename value GHC.Classes.compare = GHC.Base.compare

rename type  GHC.Types.Bool  = bool
rename value GHC.Types.True  = true
rename value GHC.Types.False = false
rename value GHC.Classes.not   = negb
rename value GHC.Classes.||    = orb
rename value GHC.Classes.&&    = andb

rename type  GHC.Base.Maybe   = option
rename value GHC.Base.Just    = Some
rename value GHC.Base.Nothing = None

rename value GHC.Err.errorWithoutStackTrace = GHC.Base.errorWithoutStackTrace

# rename type Data.Either.Either = sum
# rename value Data.Either.Right = inr
# rename value Data.Either.Left  = inl
rename value Data.Either.Right = Data.Either.Mk_Right
rename value Data.Either.Left  = Data.Either.Mk_Left

# clashes with Coq's "sum" type
# rename value Data.Foldable.sum = Data.Foldable.fsum


skip method Monad fail
skip method Enum enumFromThen
skip method Enum enumFromThenTo

# deprecated
skip method Bits bitSize

# default definition cannot be used
skip method Applicative op_zlzt__

# partial methods
skip method Foldable foldl1
skip method Foldable foldr1
skip method Foldable maximum
skip method Foldable minimum



# Any types defined in one module and used elsewhere need to have
# their constructors renamed consistently
rename value Data.Proxy.Proxy    = Data.Proxy.Mk_Proxy

rename value Data.Monoid.Dual    = Data.Monoid.Mk_Dual
rename value Data.Monoid.Sum     = Data.Monoid.Mk_Sum
rename value Data.Monoid.Product = Data.Monoid.Mk_Product
rename value Data.Monoid.First   = Data.Monoid.Mk_First
rename value Data.Monoid.Last    = Data.Monoid.Mk_Last
rename value Data.Monoid.Any     = Data.Monoid.Mk_Any
rename value Data.Monoid.All     = Data.Monoid.Mk_All
rename value Data.Monoid.Endo    = Data.Monoid.Mk_Endo

rename value Data.Functor.Const.Const = Data.Functor.Const.Mk_Const
rename value Data.Functor.Identity.Identity = Data.Functor.Identity.Mk_Identity

rename value op_zlzg__ = Data.Monoid.op_zlzg__
