# we define these types in the preamble because we need an edit to supply
# the kinds of their arguments. Coq can't figure it out.

data kinds Control.Applicative.WrappedMonad (Type -> Type)
data kinds Control.Applicative.WrappedArrow (Type -> (Type -> Type))

add Control.Applicative Instance Unpeel_WrappedMonad {m} {a} : GHC.Prim.Unpeel (Control.Applicative.WrappedMonad m a) (m a) :=
  GHC.Prim.Build_Unpeel _ _ Control.Applicative.unwrapMonad Control.Applicative.Mk_WrapMonad.
add Control.Applicative Instance Unpeel_WrappedArrow {a}{b}{c} : GHC.Prim.Unpeel (Control.Applicative.WrappedArrow a b c) (a b c) :=
  GHC.Prim.Build_Unpeel _ _ Control.Applicative.unwrapArrow Control.Applicative.Mk_WrapArrow.


skip Control.Applicative.ZipList
skip Control.Applicative.instance_GHC_Base_Applicative_Control_Applicative_ZipList
skip Control.Applicative.instance_Data_Foldable_Foldable_Control_Applicative_ZipList
skip Control.Applicative.instance_GHC_Base_Functor_Control_Applicative_ZipList
skip Control.Applicative.instance_forall___GHC_Base_Ord_a___GHC_Base_Ord__Control_Applicative_ZipList_a_
skip Control.Applicative.instance_forall___GHC_Base_Eq__a___GHC_Base_Eq___Control_Applicative_ZipList_a_


# will also need to skip Ord/Eq_/Functor/Foldable when those type applications are supported
