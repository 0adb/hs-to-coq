# we define these types in the preamble because we need an edit to supply
# the kinds of their arguments. Coq can't figure it out.

data kinds Control.Applicative.WrappedMonad (Type -> Type)
data kinds Control.Applicative.WrappedArrow (Type -> (Type -> Type))

add Control.Applicative Instance Unpeel_WrappedMonad {m} {a} : GHC.Prim.Unpeel (Control.Applicative.WrappedMonad m a) (m a) :=
  GHC.Prim.Build_Unpeel _ _ Control.Applicative.unwrapMonad Control.Applicative.WrapMonad.
add Control.Applicative Instance Unpeel_WrappedArrow {a}{b}{c} : GHC.Prim.Unpeel (Control.Applicative.WrappedArrow a b c) (a b c) :=
  GHC.Prim.Build_Unpeel _ _ Control.Applicative.unwrapArrow Control.Applicative.WrapArrow.


skip Control.Applicative.ZipList
skip Control.Applicative.Applicative__ZipList
skip Control.Applicative.Foldable__ZipList
skip Control.Applicative.Functor__ZipList
skip Control.Applicative.Eq___ZipList
skip Control.Applicative.Ord__ZipList

# will also need to skip Ord/Eq_/Functor/Foldable when those type applications are supported
