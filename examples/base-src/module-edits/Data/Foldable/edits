skip module GHC.Types

# partial

skip method Foldable foldl1
skip method Foldable foldr1
skip method Foldable maximum
skip method Foldable minimum

skip Data.Foldable.minimumBy
skip Data.Foldable.maximumBy

redefine Local Definition Data.Foldable.Foldable__pair_type_elem {inst_a}
    {a} {H : GHC.Base.Eq_ a} : (a -> (((GHC.Tuple.pair_type inst_a) a) -> bool))
    := default_elem Data.Foldable.Foldable__pair_type_foldMap.
redefine Local Definition Data.Foldable.Foldable__Either_elem {inst_a}
    {a} {H : GHC.Base.Eq_ a} : (a -> (((Data.Either.Either inst_a) a) -> bool))
    := default_elem Data.Foldable.Foldable__Either_foldMap.
redefine Local Definition Data.Foldable.Foldable__option_elem
    {a} {H : GHC.Base.Eq_ a} : (a -> ((option a) -> bool))
    := default_elem Data.Foldable.Foldable__option_foldMap.


skip Data.Foldable.Foldable__First
skip Data.Foldable.Foldable__Last

# skip Data.Foldable.GHC_Base_Ord_a___GHC_Base_Monoid__Max_a_
# skip Data.Foldable.GHC_Base_Ord_a___GHC_Base_Monoid__Min_a_

order Data.Foldable.Foldable__list concatMap concat
redefine Definition Data.Foldable.hash_compose {a} {b} {c} := @Coq.Program.Basics.compose a b c.


# Generic stuff
skip Data.Foldable.Foldable__U1
skip Data.Foldable.Foldable__Array
skip Data.Foldable.Foldable__V1
skip Data.Foldable.Foldable__URec
skip Data.Foldable.Foldable__M1
skip Data.Foldable.Foldable__K1
skip Data.Foldable.Foldable__Rec1
skip Data.Foldable.Foldable__Par1
skip Data.Foldable.Foldable__op_ZCziZC__
skip Data.Foldable.Foldable__op_ZCztZC__
skip Data.Foldable.Foldable__op_ZCzpZC__
