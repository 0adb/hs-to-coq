data kinds Data.SemigroupInternal.Alt (Type -> Type)

# needs stimes
skip Data.SemigroupInternal.stimesDefault
skip Data.SemigroupInternal.stimesList
skip Data.SemigroupInternal.stimesMaybe
skip Data.SemigroupInternal.stimesMonoid
skip Data.SemigroupInternal.stimesIdempotent

add Data.SemigroupInternal Instance Unpeel_Dual a : GHC.Prim.Unpeel (Dual a) a :=
	 GHC.Prim.Build_Unpeel _ _ getDual Mk_Dual.
add Data.SemigroupInternal Instance Unpeel_Endo a : GHC.Prim.Unpeel (Endo a) (a -> a) :=
	 GHC.Prim.Build_Unpeel _ _ appEndo Mk_Endo.
add Data.SemigroupInternal Instance Unpeel_Any : GHC.Prim.Unpeel Any bool :=
	 GHC.Prim.Build_Unpeel _ _ getAny Mk_Any.
add Data.SemigroupInternal Instance Unpeel_All : GHC.Prim.Unpeel All bool :=
	 GHC.Prim.Build_Unpeel _ _ getAll Mk_All.
add Data.SemigroupInternal Instance Unpeel_Product a : GHC.Prim.Unpeel (Product a) a :=
	 GHC.Prim.Build_Unpeel _ _ getProduct Mk_Product.
add Data.SemigroupInternal Instance Unpeel_Sum a : GHC.Prim.Unpeel (Sum a) a :=
	 GHC.Prim.Build_Unpeel _ _ getSum Mk_Sum.

order Unpeel_Any Data.SemigroupInternal.Eq___Any Data.SemigroupInternal.Ord__Any
order Unpeel_All Data.SemigroupInternal.Eq___All Data.SemigroupInternal.Ord__All
order Unpeel_Alt Data.SemigroupInternal.Eq___Alt Data.SemigroupInternal.Ord__Alt
order Unpeel_Product Data.SemigroupInternal.Eq___Product Data.SemigroupInternal.Ord__Product
order Unpeel_Sum Data.SemigroupInternal.Eq___Sum Data.SemigroupInternal.Ord__Sum
order Unpeel_Dual Data.SemigroupInternal.Eq___Dual Data.SemigroupInternal.Ord__Dual

order Data.SemigroupInternal.Semigroup__Alt Data.SemigroupInternal.Monoid__Alt_mappend

skip Data.SemigroupInternal.Read__Any
skip Data.SemigroupInternal.Read__All
skip Data.SemigroupInternal.Read__Alt
skip Data.SemigroupInternal.Read__Dual
skip Data.SemigroupInternal.Show__Any
skip Data.SemigroupInternal.Show__All
skip Data.SemigroupInternal.Show__Alt
skip Data.SemigroupInternal.Show__Dual

# Needs Alternative
skip Data.SemigroupInternal.Semigroup__Alt
skip Data.SemigroupInternal.Monoid__Alt
skip Data.SemigroupInternal.MonadPlus__Alt

# This removes a suprious {k}
redefine Instance Data.SemigroupInternal.Eq___Alt {f} {a} `{(GHC.Base.Eq_ (f a))}
   : GHC.Base.Eq_ (Alt f a) :=
  fun _ k =>
    k (GHC.Base.Eq___Dict_Build _
         Data.SemigroupInternal.Eq___Alt_op_zeze__
         Data.SemigroupInternal.Eq___Alt_op_zsze__).

redefine Instance Data.SemigroupInternal.Ord__Alt {f} {a} `{(GHC.Base.Ord (f a))}
   : GHC.Base.Ord (Alt f a) :=
  fun _ k => k (GHC.Base.Ord__Dict_Build _
     Data.SemigroupInternal.Ord__Alt_op_zl__
     Data.SemigroupInternal.Ord__Alt_op_zlze__
     Data.SemigroupInternal.Ord__Alt_op_zg__
     Data.SemigroupInternal.Ord__Alt_op_zgze__
     Data.SemigroupInternal.Ord__Alt_compare
     Data.SemigroupInternal.Ord__Alt_max
     Data.SemigroupInternal.Ord__Alt_min).

# hs-to-coq uses the wrong type variable names in a type annotation to the argument of `coerce`
redefine Local Definition Data.SemigroupInternal.Semigroup__Alt_op_zlzlzgzg__ {inst_f} {inst_a}
  `{(GHC.Base.Alternative inst_f)} : (Alt inst_f inst_a) -> ((Alt inst_f inst_a) -> (Alt inst_f inst_a)) :=
  GHC.Prim.coerce (GHC.Base.op_zlzbzg__).

redefine Local Definition Data.SemigroupInternal.Semigroup__Product_op_zlzlzgzg__ {inst_a} `{(GHC.Num.Num inst_a)}
   : (Product inst_a) -> ((Product inst_a) -> (Product inst_a)) :=
  GHC.Prim.coerce (GHC.Num.*).

redefine Local Definition Data.SemigroupInternal.Semigroup__Sum_op_zlzlzgzg__ {inst_a} `{(GHC.Num.Num inst_a)}
   : (Sum inst_a) -> ((Sum inst_a) -> (Sum inst_a)) :=
  GHC.Prim.coerce (GHC.Num.+).

redefine Local Definition Data.SemigroupInternal.Semigroup__Endo_op_zlzlzgzg__ {inst_a}
   : (Endo inst_a) -> ((Endo inst_a) -> (Endo inst_a)) :=
  GHC.Prim.coerce (Coq.Program.Basics.compose).
