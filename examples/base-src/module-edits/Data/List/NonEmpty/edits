# axiomatize module Data.List.NonEmpty
# poor treatment of <| and !! when axiomatized (notation, cannot rename them either)

rename value :| = NEcons
rename value op_ZCzb__ = Mk_NEcons

# still partial
skip !!
skip op_znzn__


redefine Local Definition instance_GHC_Base_Applicative_NonEmpty_op_zlztzg__ : forall {a} {b},
  (NonEmpty (a -> b)) -> ((NonEmpty a) -> (NonEmpty b)) := fun {a} {b} => zipWith id.

order zipWith instance_GHC_Base_Applicative_NonEmpty_op_zlztzg__ instance_GHC_Base_Applicative_NonEmpty instance_GHC_Base_Monad_NonEmpty_op_zgzg__ instance_GHC_Base_Monad_NonEmpty_return_ instance_GHC_Base_Monad_NonEmpty

order instance_forall___GHC_Base_Eq__a___GHC_Base_Eq___NonEmpty_a_ instance_forall___GHC_Base_Ord_a___GHC_Base_Ord__NonEmpty_a_

order instance_Data_Foldable_Foldable_NonEmpty instance_Data_Traversable_Traversable_NonEmpty reverse sort sortBy sortWith

# needs Data.OldList.transpose
skip transpose
# needs Data.OldList.intersperse
skip intersperse

skip iterate

skip inits

skip repeat

skip cycle

##???
skip unfoldr

# actually total, can't tell
skip scanr1
skip init
skip last
skip unfold

# recursive call to Foldable
skip groupBy
skip group
skip groupWith
skip groupAllWith
skip groupBy1
skip groupWith1
skip groupAllWith1
skip group1




redefine Local Definition instance_forall___GHC_Base_Eq__a___GHC_Base_Eq___NonEmpty_a__op_zsze__ {inst_a}
                                                                                        `{_: GHC.Base.Eq_ inst_a}
    : (NonEmpty inst_a) -> ((NonEmpty inst_a) -> bool) :=
  fun arg_198__ arg_199__ =>
    match arg_198__ , arg_199__ with
      | a , b => negb (instance_forall___GHC_Base_Eq__a___GHC_Base_Eq___NonEmpty_a__op_zeze__ a b)
    end.


redefine Local Definition instance_Data_Foldable_Foldable_NonEmpty_elem :
  forall {a},
  forall `{_ : GHC.Base.Eq_ a}, a -> ((NonEmpty a) -> bool) :=
  fun {a} `{_ : GHC.Base.Eq_ a} => Coq.Program.Basics.compose
   (fun p => Data.Foldable.hash_compose Data.Monoid.getAny (instance_Data_Foldable_Foldable_NonEmpty_foldMap (Data.Foldable.hash_compose Data.Monoid.Mk_Any p)))
   GHC.Base.op_zeze__.

order instance_Data_Foldable_Foldable_NonEmpty_foldMap instance_Data_Foldable_Foldable_NonEmpty_elem
