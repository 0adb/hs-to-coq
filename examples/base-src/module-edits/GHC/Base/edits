# We have notation in the midamble, and we have to tell hs-to-coq
# to include the ManualNotations module in the Notations module
manual notation GHC.Base

skip module GHC.Types

skip GHC.Base.String   # replace with Coq type
skip GHC.Base.Maybe    # replace with Coq type

skip GHC.Base.++       # replace with Coq

skip GHC.Base.Opaque   # can't handle existential
skip GHC.Base.build    # higher-rank type
skip GHC.Base.augment  # higher-rank type

# partial
skip GHC.Base.until

# can't handle overloaded ifthenelse
skip GHC.Base.ifThenElse

# no IO
skip GHC.Base.unIO
skip GHC.Base.thenIO
skip GHC.Base.returnIO
skip GHC.Base.bindIO
skip GHC.Base.Functor__IO
skip GHC.Base.Applicative__IO
skip GHC.Base.Alternative__IO
skip GHC.Base.Monad__IO
skip GHC.Base.MonadPlus__IO
skip GHC.Base.Monoid__IO

# Why is this not Monoid__pair_type?
skip GHC.Base.Monoid__op_zt__

# no unboxed types
skip GHC.Base.unsafeChr
skip GHC.Base.ord

skip GHC.Base.shiftRL#
skip GHC.Base.shiftL#
skip GHC.Base.iShiftL#
skip GHC.Base.iShiftRA#
skip GHC.Base.iShiftRL#
skip GHC.Base.divModInt#

skip GHC.Base.remInt
skip GHC.Base.quotRemInt
skip GHC.Base.divModInt
skip GHC.Base.divInt
skip GHC.Base.minInt
skip GHC.Base.maxInt
skip GHC.Base.modInt
skip GHC.Base.quotInt
skip GHC.Base.getTag

skip GHC.Base.primIntToChar
skip GHC.Base.primCharToInt
skip GHC.Base.primUnicodeMaxChar

## Type class instance ordering

order GHC.Base.Eq___option GHC.Base.Ord__option

order GHC.Base.Functor__arrow GHC.Base.Applicative__arrow_op_ztzg__ GHC.Base.Applicative__arrow GHC.Base.Monad__arrow_return_ GHC.Base.Monad__arrow GHC.Base.Alternative__arrow GHC.Base.MonadPlus__arrow

order GHC.Base.Functor__list GHC.Base.Applicative__list GHC.Base.Monad__list_return_ GHC.Base.Monad__list_op_zgzg__ GHC.Base.Monad__list

order GHC.Base.Functor__option GHC.Base.Applicative__option_op_zlztzg__ GHC.Base.Applicative__option GHC.Base.Monad__option_op_zgzg__ GHC.Base.Monad__option_return_ GHC.Base.Monad__option GHC.Base.Alternative__option GHC.Base.MonadPlus__option

order GHC.Base.Functor__pair_type GHC.Base.Applicative__pair_type GHC.Base.Monad__pair_type_return_ GHC.Base.Monad__pair_type_op_zgzgze__ GHC.Base.Monad__pair_type_op_zgzg__

order GHC.Base.Functor__pair_type GHC.Base.Applicative__pair_type_op_ztzg__

skip GHC.Base.Alternative__list
skip GHC.Base.MonadPlus__list
skip GHC.Base.Alternative__option
skip GHC.Base.MonadPlus__option

# Haskellâ€™s definition of passes the f around, which trips over the
# termination checker when a function does nested recursion through map
# If we have a local fix for just the argument, then things often work out
redefine Definition GHC.Base.map {A B :Type} (f : A -> B) xs := Coq.Lists.List.map f xs.

class kinds GHC.Base.MonadPlus (Type -> Type)
