--- prelude_raw.v	2016-10-28 10:28:05.000000000 -0400
+++ prelude.v	2016-10-28 10:29:02.000000000 -0400
@@ -1,4 +1,35 @@
+Require Import ZArith.
+Require Import List.
+Require String.
+Require Import Ascii.
+Open Scope string_scope.
+
+Axiom prim : forall {a}, String.string -> a.
+
+Notation "'_(,)_'" := pair.
+Notation "'_(,,)_'" := (fun x y z => (x,y,z)).
+
+Arguments cons {_} _ _.
+Notation "'_::_'" := cons.
+
 (* Converted data type declarations: *)
+Inductive Char : Type :=.
+
+Definition String := (list Char).
+
+Definition string := String.
+
+Axiom      __explode__   : String.string -> string.
+Definition __explode'__  : String.string -> String    := __explode__.
+Definition __explode''__ : String.string -> list Char := __explode__.
+
+Coercion __explode__   : String.string >-> string.
+Coercion __explode'__  : String.string >-> String.
+Coercion __explode''__ : String.string >-> list.
+
+Axiom __ascii__ : ascii -> Char.
+Coercion __ascii__ : ascii >-> Char.
+
 Definition ShowS := (string -> string).
 
 Definition ReadS a := (string -> (list (a * string))).
@@ -21,9 +52,6 @@
 
 Notation "'_>>=_'" := (__op_zgzgze__).
 
-Inductive Maybe a : Type := Mk_Nothing : (Maybe a)
-                         |  Mk_Just : (a -> (Maybe a)).
-
 Inductive Integer : Type :=.
 
 Inductive Int : Type :=.
@@ -39,7 +67,7 @@
 
 Inductive IOError : Type :=.
 
-Inductive IO a : Type :=.
+Inductive IO (a:Type) : Type :=.
 
 Class Functor f := {
   fmap : (forall {a} {b}, (((a -> b)) -> ((f a) -> (f b)))) }.
@@ -68,25 +96,28 @@
   fromInteger : (Z -> a) ;
   negate : (a -> a) ;
   signum : (a -> a) }.
+Notation "# n" := (fromInteger n) (at level 0, only parsing).
 
-Infix "*" := (__op_zt__) (at level 99).
+Infix "*" := (__op_zt__).
 
 Notation "'_*_'" := (__op_zt__).
 
-Infix "+" := (__op_zp__) (at level 99).
+Infix "+" := (__op_zp__).
 
 Notation "'_+_'" := (__op_zp__).
 
-Infix "-" := (__op_zm__) (at level 99).
+Infix "-" := (__op_zm__).
 
 Notation "'_-_'" := (__op_zm__).
 
+Inductive Rational :=.
+
 Class Fractional a `{((Num a))} := {
   __op_zs__ : (a -> (a -> a)) ;
   fromRational : (Rational -> a) ;
   recip : (a -> a) }.
 
-Infix "/" := (__op_zs__) (at level 99).
+Infix "/" := (__op_zs__).
 
 Notation "'_/_'" := (__op_zs__).
 
@@ -123,19 +154,19 @@
   max : (a -> (a -> a)) ;
   min : (a -> (a -> a)) }.
 
-Infix "<" := (__op_zl__) (at level 99).
+Infix "<" := (__op_zl__).
 
 Notation "'_<_'" := (__op_zl__).
 
-Infix "<=" := (__op_zlze__) (at level 99).
+Infix "<=" := (__op_zlze__).
 
 Notation "'_<=_'" := (__op_zlze__).
 
-Infix ">" := (__op_zg__) (at level 99).
+Infix ">" := (__op_zg__).
 
 Notation "'_>_'" := (__op_zg__).
 
-Infix ">=" := (__op_zgze__) (at level 99).
+Infix ">=" := (__op_zgze__).
 
 Notation "'_>=_'" := (__op_zgze__).
 
@@ -187,19 +218,15 @@
 Inductive Either a b : Type := Mk_Left : (a -> (Either a b))
                             |  Mk_Right : (b -> (Either a b)).
 
-Inductive Double : Type :=.
-
-Inductive Char : Type :=.
+Arguments Mk_Left  {_ _} _.
+Arguments Mk_Right {_ _} _.
 
-Definition String := (list Char).
+Inductive Double : Type :=.
 
 Class Bounded a := {
   maxBound : a ;
   minBound : a }.
 
-Inductive Bool : Type := Mk_False : Bool
-                      |  Mk_True : Bool.
-
 (* Converted function declarations: *)
 Definition zipWith3 {a} {b} {c} {d} : (((a -> (b -> (c -> d)))) -> ((list
                                       a) -> ((list b) -> ((list c) -> (list d))))) := (fix zipWith3 __arg_209__
@@ -235,20 +262,20 @@
 Definition zip {a} {b} : ((list a) -> ((list b) -> (list (a * b)))) := (zipWith
                                                                        _(,)_).
 
-Definition writeFile : (FilePath -> (string -> (IO unit))) := primWriteFile.
+Definition writeFile : (FilePath -> (string -> (IO unit))) := prim "WriteFile".
 
-Definition userError : (string -> IOError) := primUserError.
+Definition userError : (string -> IOError) := prim "UserError".
 
-Definition until {a} : (((a -> bool)) -> (((a -> a)) -> (a -> a))) := (fix until
-                                                                             __arg_131__ __arg_132__ __arg_133__
-                                                                             := (match __arg_131__
-                                                                                     , __arg_132__
-                                                                                     , __arg_133__ with
-                                                                                  | p , f , x => (if (p x)
-                                                                                                 then x
-                                                                                                 else (((until p) f) ((f
-                                                                                                                     x))))
-                                                                                end)).
+(* Definition until {a} : (((a -> bool)) -> (((a -> a)) -> (a -> a))) := (fix until *)
+(*                                                                              __arg_131__ __arg_132__ __arg_133__ *)
+(*                                                                              := (match __arg_131__ *)
+(*                                                                                      , __arg_132__ *)
+(*                                                                                      , __arg_133__ with *)
+(*                                                                                   | p , f , x => (if (p x) *)
+(*                                                                                                  then x *)
+(*                                                                                                  else (((until p) f) ((f *)
+(*                                                                                                                      x)))) *)
+(*                                                                                 end)). *)
 
 Definition takeWhile {a} : (((a -> bool)) -> ((list a) -> (list a))) :=
   (fix takeWhile __arg_182__ __arg_183__ := (match __arg_182__ , __arg_183__ with
@@ -258,17 +285,24 @@
                                                                  else nil)
                                             end)).
 
-Definition take {a} : (Int -> ((list a) -> (list a))) := (fix take __arg_176__
-                                                                   __arg_177__ := (match __arg_176__ , __arg_177__ with
-                                                                                    | n , _ => (if (n <= #0)
-                                                                                               then nil
-                                                                                               else _(*MissingValue*))
-                                                                                    | _ , nil => nil
-                                                                                    | n , (x :: xs) => (x :: ((take ((n
-                                                                                                                    -
-                                                                                                                    #1)))
-                                                                                                       xs))
-                                                                                  end)).
+Instance __instance__Eq_Int__   : Eq   Int. Admitted.
+Instance __instance__Ord_Int__  : Ord  Int. Admitted.
+Instance __instance__Show_Int__ : Show Int. Admitted.
+Instance __instance__Num_Int__  : Num  Int. Admitted.
+
+Definition take {a} : (Int -> ((list a) -> (list a))) :=
+  (fix take __arg_176__ __arg_177__ {struct __arg_177__} :=
+     (match __arg_176__ , __arg_177__ with
+      | n , _ => (if (n <= #0)
+                  then nil
+                  else match __arg_176__ , __arg_177__ with
+                       | _ , nil => nil
+                       | n , (x :: xs) => (x :: ((take ((n
+                                                         -
+                                                         #1)))
+                                                   xs))
+                       end)
+      end)).
 
 Definition span {a} : (((a -> bool)) -> ((list a) -> ((list a) * (list a)))) :=
   (fix span __arg_186__ __arg_187__ := (match __arg_186__ , __arg_187__ with
@@ -295,22 +329,19 @@
                                            | f , (x :: nil) => (x :: nil)
                                            | f , (x :: xs) => (match ((scanr1 f) xs) with
                                                                 | ((q :: _) as qs) => (((f x) q) :: qs)
+                                                                | nil => nil (* can't happen *)
                                                               end)
                                          end)).
 
-Definition scanr {a} {b} : (((a -> (b -> b))) -> (b -> ((list a) -> (list
-                           b)))) := (fix scanr __arg_165__ __arg_166__ __arg_167__ := (match __arg_165__
-                                                                                           , __arg_166__
-                                                                                           , __arg_167__ with
-                                                                                        | f , q0 , nil => (q0 :: nil)
-                                                                                        | f , q0 , (x :: xs) =>
-                                                                                          (match (((scanr f) q0)
-                                                                                                   xs) with
-                                                                                            | ((q :: _) as qs) => (((f
-                                                                                                                  x) q)
-                                                                                                                  :: qs)
-                                                                                          end)
-                                                                                      end)).
+Definition scanr {a} {b} : (((a -> (b -> b))) -> (b -> ((list a) -> (list b)))) :=
+  (fix scanr __arg_165__ __arg_166__ __arg_167__ := (match __arg_165__ , __arg_166__ , __arg_167__ with
+                                                     | f , q0 , nil => (q0 :: nil)
+                                                     | f , q0 , (x :: xs) =>
+                                                       (match (((scanr f) q0) xs) with
+                                                        | ((q :: _) as qs) => (((f x) q) :: qs)
+                                                        | nil => nil (* can't happen *)
+                                                        end)
+                                                     end)).
 
 Definition scanl {a} {b} : (((a -> (b -> a))) -> (a -> ((list b) -> (list
                            a)))) := (fix scanl __arg_155__ __arg_156__ __arg_157__ := (match __arg_155__
@@ -334,45 +365,45 @@
       | _ , nil => nil
     end)).
 
-Definition repeat {a} : (a -> (list a)) := (fun __arg_172__ =>
-                                             (match __arg_172__ with
-                                               | x => (let xs := (x :: xs)
-                                                      in xs)
-                                             end)).
-
-Definition replicate {a} : (Int -> (a -> (list a))) := (fun __arg_173__
-                                                            __arg_174__ =>
-                                                         (match __arg_173__ , __arg_174__ with
-                                                           | n , x => ((take n) ((repeat x)))
-                                                         end)).
+(* Definition repeat {a} : (a -> (list a)) := (fun __arg_172__ => *)
+(*                                              (match __arg_172__ with *)
+(*                                                | x => (let xs := (x :: xs) *)
+(*                                                       in xs) *)
+(*                                              end)). *)
+
+(* Definition replicate {a} : (Int -> (a -> (list a))) := (fun __arg_173__ *)
+(*                                                             __arg_174__ => *)
+(*                                                          (match __arg_173__ , __arg_174__ with *)
+(*                                                            | n , x => ((take n) ((repeat x))) *)
+(*                                                          end)). *)
 
 Definition reads {a} `{((Read a))} : (ReadS a) := (readsPrec #0).
 
-Definition readParen {a} : (bool -> ((ReadS a) -> (ReadS a))) :=
-  (fun __arg_220__
-       __arg_221__ =>
-    (match __arg_220__ , __arg_221__ with
-      | b , g => (if b
-                 then mandatory
-                 else optional)
-    end)).
+(* Definition readParen {a} : (bool -> ((ReadS a) -> (ReadS a))) := *)
+(*   (fun __arg_220__ *)
+(*        __arg_221__ => *)
+(*     (match __arg_220__ , __arg_221__ with *)
+(*       | b , g => (if b *)
+(*                  then mandatory *)
+(*                  else optional) *)
+(*     end)). *)
 
-Definition readFile : (FilePath -> (IO string)) := primReadFile.
+Definition readFile : (FilePath -> (IO string)) := prim "ReadFile".
 
-Definition putChar : (Char -> (IO unit)) := primPutChar.
+Definition putChar : (Char -> (IO unit)) := prim "PutChar".
 
-Definition otherwise : bool := Mk_True.
+Definition otherwise : bool := true.
 
 Definition null {a} : ((list a) -> bool) := (fun __arg_146__ =>
                                               (match __arg_146__ with
-                                                | nil => Mk_True
-                                                | (_ :: _) => Mk_False
+                                                | nil => true
+                                                | (_ :: _) => false
                                               end)).
 
 Definition not : (bool -> bool) := (fun __arg_105__ =>
                                      (match __arg_105__ with
-                                       | Mk_True => Mk_False
-                                       | Mk_False => Mk_True
+                                       | true => false
+                                       | false => true
                                      end)).
 
 Definition maybe {a} {b} : (b -> (((a -> b)) -> ((option a) -> b))) :=
@@ -380,8 +411,8 @@
        __arg_107__
        __arg_108__ =>
     (match __arg_106__ , __arg_107__ , __arg_108__ with
-      | n , f , Mk_Nothing => n
-      | n , f , (Mk_Just x) => (f x)
+      | n , f , None => n
+      | n , f , (Some x) => (f x)
     end)).
 
 Definition map {a} {b} : (((a -> b)) -> ((list a) -> (list b))) := (fix map
@@ -396,9 +427,9 @@
 
 Definition lookup {a} {b} `{((Eq a))} : (a -> ((list (a * b)) -> (option b))) :=
   (fix lookup __arg_202__ __arg_203__ := (match __arg_202__ , __arg_203__ with
-                                           | key , nil => Mk_Nothing
+                                           | key , nil => None
                                            | key , ((pair x y) :: xys) => (if (key == x)
-                                                                          then (Mk_Just y)
+                                                                          then (Some y)
                                                                           else ((lookup key) xys))
                                          end)).
 
@@ -408,58 +439,58 @@
                                                          | (_ :: l) => (#1 + (length l))
                                                        end)).
 
-Definition iterate {a} : (((a -> a)) -> (a -> (list a))) := (fix iterate
-                                                                   __arg_170__ __arg_171__ := (match __arg_170__
-                                                                                                   , __arg_171__ with
-                                                                                                | f , x => (x ::
-                                                                                                           ((iterate f)
-                                                                                                           ((f x))))
-                                                                                              end)).
-
-Definition numericEnumFrom {a} `{((Fractional a))} : (a -> (list a)) := (iterate
-                                                                        ((fun __arg_112__ => (__arg_112__ + #1)))).
-
-Definition numericEnumFromTo {a} `{(Fractional a)} `{(Ord a)}
-  : (a -> (a -> (list a))) := (fun __arg_117__
-                                   __arg_118__ =>
-                                (match __arg_117__ , __arg_118__ with
-                                  | n , m => ((takeWhile ((fun __arg_116__ => (__arg_116__ <= ((m + #1) / #2)))))
-                                             ((numericEnumFrom n)))
-                                end)).
-
-Definition numericEnumFromThen {a} `{((Fractional a))} : (a -> (a -> (list
-                                                         a))) := (fun __arg_114__
-                                                                      __arg_115__ =>
-                                                                   (match __arg_114__ , __arg_115__ with
-                                                                     | n , m => ((iterate ((fun __arg_113__ =>
-                                                                                            (__arg_113__ + ((m - n))))))
-                                                                                n)
-                                                                   end)).
-
-Definition numericEnumFromThenTo {a} `{(Fractional a)} `{(Ord a)}
-  : (a -> (a -> (a -> (list a)))) := (fun __arg_121__
-                                          __arg_122__
-                                          __arg_123__ =>
-                                       (match __arg_121__ , __arg_122__ , __arg_123__ with
-                                         | n , n' , m => (let p :=
-                                                           (if (n' >= n)
-                                                           then ((fun __arg_119__ =>
-                                                                  (__arg_119__ <= ((m + ((n' - n))) / #2))))
-                                                           else ((fun __arg_120__ =>
-                                                                  (__arg_120__ >= ((m + ((n' - n))) / #2)))))
-                                                         in ((takeWhile p) (((numericEnumFromThen n) n'))))
-                                       end)).
+(* Definition iterate {a} : (((a -> a)) -> (a -> (list a))) := (fix iterate *)
+(*                                                                    __arg_170__ __arg_171__ := (match __arg_170__ *)
+(*                                                                                                    , __arg_171__ with *)
+(*                                                                                                 | f , x => (x :: *)
+(*                                                                                                            ((iterate f) *)
+(*                                                                                                            ((f x)))) *)
+(*                                                                                               end)). *)
+
+(* Definition numericEnumFrom {a} `{((Fractional a))} : (a -> (list a)) := (iterate *)
+(*                                                                         ((fun __arg_112__ => (__arg_112__ + #1)))). *)
+
+(* Definition numericEnumFromTo {a} `{(Fractional a)} `{(Ord a)} *)
+(*   : (a -> (a -> (list a))) := (fun __arg_117__ *)
+(*                                    __arg_118__ => *)
+(*                                 (match __arg_117__ , __arg_118__ with *)
+(*                                   | n , m => ((takeWhile ((fun __arg_116__ => (__arg_116__ <= ((m + #1) / #2))))) *)
+(*                                              ((numericEnumFrom n))) *)
+(*                                 end)). *)
+
+(* Definition numericEnumFromThen {a} `{((Fractional a))} : (a -> (a -> (list *)
+(*                                                          a))) := (fun __arg_114__ *)
+(*                                                                       __arg_115__ => *)
+(*                                                                    (match __arg_114__ , __arg_115__ with *)
+(*                                                                      | n , m => ((iterate ((fun __arg_113__ => *)
+(*                                                                                             (__arg_113__ + ((m - n)))))) *)
+(*                                                                                 n) *)
+(*                                                                    end)). *)
+
+(* Definition numericEnumFromThenTo {a} `{(Fractional a)} `{(Ord a)} *)
+(*   : (a -> (a -> (a -> (list a)))) := (fun __arg_121__ *)
+(*                                           __arg_122__ *)
+(*                                           __arg_123__ => *)
+(*                                        (match __arg_121__ , __arg_122__ , __arg_123__ with *)
+(*                                          | n , n' , m => (let p := *)
+(*                                                            (if (n' >= n) *)
+(*                                                            then ((fun __arg_119__ => *)
+(*                                                                   (__arg_119__ <= ((m + ((n' - n))) / #2)))) *)
+(*                                                            else ((fun __arg_120__ => *)
+(*                                                                   (__arg_120__ >= ((m + ((n' - n))) / #2))))) *)
+(*                                                          in ((takeWhile p) (((numericEnumFromThen n) n')))) *)
+(*                                        end)). *)
 
-Definition ioError {a} : (IOError -> (IO a)) := primIOError.
+Definition ioError {a} : (IOError -> (IO a)) := prim "IOError".
 
 Definition id {a} : (a -> a) := (fun __arg_88__ =>
                                   (match __arg_88__ with
                                     | x => x
                                   end)).
 
-Definition getContents : (IO string) := primGetContents.
+Definition getContents : (IO string) := prim "GetContents".
 
-Definition getChar : (IO Char) := primGetChar.
+Definition getChar : (IO Char) := prim "GetChar".
 
 Definition fst {a} {b} : ((a * b) -> a) := (fun __arg_124__ =>
                                              (match __arg_124__ with
@@ -513,6 +544,9 @@
                                                            | f , as_ => (sequence_ (((map f) as_)))
                                                          end)).
 
+Instance __instance__Functor_IO__ : Functor IO. Admitted.
+Instance __instance__Monad_IO__   : Monad   IO. Admitted.
+
 Definition putStr : (string -> (IO unit)) := (fun __arg_222__ =>
                                                (match __arg_222__ with
                                                  | s => ((mapM_ putChar) s)
@@ -594,7 +628,7 @@
                                                            | n => ((rem n #2) == #0)
                                                          end)).
 
-Definition error {a} : (string -> a) := primError.
+Definition error {a} : (string -> a) := prim "Error".
 
 Definition foldl1 {a} : (((a -> (a -> a))) -> ((list a) -> a)) :=
   (fun __arg_153__
@@ -617,26 +651,26 @@
                                                                                                         "Prelude.foldr1: empty list")
                                                                                                     end)).
 
-Definition gcd {a} `{((Integral a))} : (a -> (a -> a)) := (fun __arg_65__
-                                                               __arg_66__ =>
-                                                            (match __arg_65__ , __arg_66__ with
-                                                              | 0 , 0 => (error "Prelude.gcd: gcd 0 0 is undefined")
-                                                              | x , y => (let gcd' :=
-                                                                           (fix gcd' __arg_63__ __arg_64__
-                                                                                  := (match __arg_63__ , __arg_64__ with
-                                                                                       | x , 0 => x
-                                                                                       | x , y => ((gcd' y) ((rem x y)))
-                                                                                     end))
-                                                                         in ((gcd' ((abs x))) ((abs y))))
-                                                            end)).
-
-Definition lcm {a} `{((Integral a))} : (a -> (a -> a)) := (fun __arg_67__
-                                                               __arg_68__ =>
-                                                            (match __arg_67__ , __arg_68__ with
-                                                              | _ , 0 => #0
-                                                              | 0 , _ => #0
-                                                              | x , y => (abs ((((quot x (((gcd x) y)))) * y)))
-                                                            end)).
+(* Definition gcd {a} `{((Integral a))} : (a -> (a -> a)) := (fun __arg_65__ *)
+(*                                                                __arg_66__ => *)
+(*                                                             (match __arg_65__ , __arg_66__ with *)
+(*                                                               | 0 , 0 => (error "Prelude.gcd: gcd 0 0 is undefined") *)
+(*                                                               | x , y => (let gcd' := *)
+(*                                                                            (fix gcd' __arg_63__ __arg_64__ *)
+(*                                                                                   := (match __arg_63__ , __arg_64__ with *)
+(*                                                                                        | x , 0 => x *)
+(*                                                                                        | x , y => ((gcd' y) ((rem x y))) *)
+(*                                                                                      end)) *)
+(*                                                                          in ((gcd' ((abs x))) ((abs y)))) *)
+(*                                                             end)). *)
+
+(* Definition lcm {a} `{((Integral a))} : (a -> (a -> a)) := (fun __arg_67__ *)
+(*                                                                __arg_68__ => *)
+(*                                                             (match __arg_67__ , __arg_68__ with *)
+(*                                                               | _ , 0 => #0 *)
+(*                                                               | 0 , _ => #0 *)
+(*                                                               | x , y => (abs ((((quot x (((gcd x) y)))) * y))) *)
+(*                                                             end)). *)
 
 Definition head {a} : ((list a) -> a) := (fun __arg_142__ =>
                                            (match __arg_142__ with
@@ -700,15 +734,16 @@
                                                                           else xs)
                                             end)).
 
-Definition drop {a} : (Int -> ((list a) -> (list a))) := (fix drop __arg_178__
-                                                                   __arg_179__ := (match __arg_178__ , __arg_179__ with
-                                                                                    | n , xs => (if (n <= #0)
-                                                                                                then xs
-                                                                                                else _(*MissingValue*))
-                                                                                    | _ , nil => nil
-                                                                                    | n , (_ :: xs) => ((drop ((n -
-                                                                                                              #1))) xs)
-                                                                                  end)).
+Definition drop {a} : (Int -> ((list a) -> (list a))) :=
+  (fix drop __arg_178__ __arg_179__ {struct __arg_179__} :=
+     (match __arg_178__ , __arg_179__ with
+      | n , xs => (if (n <= #0)
+                   then xs
+                   else match __arg_178__ , __arg_179__ with
+                        | _ , nil => nil
+                        | n , (_ :: xs) => ((drop ((n - #1))) xs)
+                        end)
+      end)).
 
 Definition splitAt {a} : (Int -> ((list a) -> ((list a) * (list a)))) :=
   (fun __arg_180__
@@ -734,11 +769,11 @@
 Definition seq {a} {b} : (a -> (b -> b)) := (flip const).
 
 Definition catch {a} : ((IO a) -> (((IOError -> (IO a))) -> (IO a))) :=
-  primCatch.
+  prim "Catch".
 
 Definition asTypeOf {a} : (a -> (a -> a)) := const.
 
-Definition appendFile : (FilePath -> (string -> (IO unit))) := primAppendFile.
+Definition appendFile : (FilePath -> (string -> (IO unit))) := prim "AppendFile".
 
 Definition __op_zpzp__ {a} : ((list a) -> ((list a) -> (list a))) :=
   (fix __op_zpzp__ __arg_136__ __arg_137__ := (match __arg_136__
@@ -747,7 +782,7 @@
                                                 | (x :: xs) , ys => (x :: ((xs ++ ys)))
                                               end)).
 
-Infix "++" := (__op_zpzp__) (at level 99).
+Infix "++" := (__op_zpzp__).
 
 Notation "'_++_'" := (__op_zpzp__).
 
@@ -756,43 +791,44 @@
                                                              | xss => (((foldr _++_) nil) xss)
                                                            end)).
 
-Definition cycle {a} : ((list a) -> (list a)) := (fun __arg_175__ =>
-                                                   (match __arg_175__ with
-                                                     | nil => (error "Prelude.cycle: empty list")
-                                                     | xs => (let xs' := (xs ++ xs')
-                                                             in xs')
-                                                   end)).
+(* Definition cycle {a} : ((list a) -> (list a)) := (fun __arg_175__ => *)
+(*                                                    (match __arg_175__ with *)
+(*                                                      | nil => (error "Prelude.cycle: empty list") *)
+(*                                                      | xs => (let xs' := (xs ++ xs') *)
+(*                                                              in xs') *)
+(*                                                    end)). *)
 
 Definition showString : (string -> ShowS) := _++_.
 
-Definition unwords : ((list string) -> string) := (fun __arg_195__ =>
-                                                    (match __arg_195__ with
-                                                      | nil => ""
-                                                      | ws => ((foldr1 ((fun __arg_193__
-                                                                             __arg_194__ =>
-                                                                         (match __arg_193__ , __arg_194__ with
-                                                                           | w , s => ((w ++ (" "%char)) :: s)
-                                                                         end)))) ws)
-                                                    end)).
-
-Definition __op_znzn__ {a} : ((list a) -> (Int -> a)) := (fix __op_znzn__
-                                                                __arg_148__ __arg_149__ := (match __arg_148__
-                                                                                                , __arg_149__ with
-                                                                                             | xs , n => (if (n < #0)
-                                                                                                         then (error
-                                                                                                              "Prelude.!!: negative index")
-                                                                                                         else _(*MissingValue*))
-                                                                                             | nil , _ => (error
-                                                                                                          "Prelude.!!: index too large")
-                                                                                             | (x :: _) , 0 => x
-                                                                                             | (_ :: xs) , n => (xs !!
-                                                                                                                ((n -
-                                                                                                                #1)))
-                                                                                           end)).
+Definition unwords : ((list string) -> string) := 
+  (fun __arg_195__ =>
+     (match __arg_195__ with
+      | nil => ""
+      | ws => ((foldr1 ((fun __arg_193__
+                             __arg_194__ =>
+                           (match __arg_193__ , __arg_194__ with
+                            | w , s => (w ++ ((" "%char : Char) :: s))
+                            end)))) ws)
+      end)).
+
+(* Definition __op_znzn__ {a} : ((list a) -> (Int -> a)) := (fix __op_znzn__ *)
+(*                                                                 __arg_148__ __arg_149__ := (match __arg_148__ *)
+(*                                                                                                 , __arg_149__ with *)
+(*                                                                                              | xs , n => (if (n < #0) *)
+(*                                                                                                          then (error *)
+(*                                                                                                               "Prelude.!!: negative index") *)
+(*                                                                                                          else _(*MissingValue*)) *)
+(*                                                                                              | nil , _ => (error *)
+(*                                                                                                           "Prelude.!!: index too large") *)
+(*                                                                                              | (x :: _) , 0 => x *)
+(*                                                                                              | (_ :: xs) , n => (xs !! *)
+(*                                                                                                                 ((n - *)
+(*                                                                                                                 #1))) *)
+(*                                                                                            end)). *)
 
-Infix "!!" := (__op_znzn__) (at level 99).
+(* Infix "!!" := (__op_znzn__) (at level 99). *)
 
-Notation "'_!!_'" := (__op_znzn__).
+(* Notation "'_!!_'" := (__op_znzn__). *)
 
 Definition __op_zezlzl__ {a} {b} {m} `{(Monad m)} : (((a -> (m b))) -> ((m
                                                     a) -> (m b))) := (fun __arg_86__
@@ -825,80 +861,80 @@
 
 Notation "'_$_'" := (__op_zd__).
 
-Definition __op_zc__ {a} {b} `{(Num a)} `{(Integral b)} : (a -> (b -> a)) :=
-  (fun __arg_74__
-       __arg_75__ =>
-    (match __arg_74__ , __arg_75__ with
-      | x , 0 => #1
-      | x , n => (let f :=
-                   (fix f __arg_71__ __arg_72__ __arg_73__ := (match __arg_71__
-                                                                   , __arg_72__
-                                                                   , __arg_73__ with
-                                                                | _ , 0 , y => y
-                                                                | x , n , y => (let g :=
-                                                                                 (fix g __arg_69__ __arg_70__
-                                                                                        := (match __arg_69__
-                                                                                                , __arg_70__ with
-                                                                                             | x , n => (if (even n)
-                                                                                                        then ((g ((x *
-                                                                                                                 x)))
-                                                                                                             ((quot n
-                                                                                                                    #2)))
-                                                                                                        else (((f x) ((n
-                                                                                                                     -
-                                                                                                                     #1)))
-                                                                                                             ((x * y))))
-                                                                                           end))
-                                                                               in ((g x) n))
-                                                              end))
-                 in (if (n > #0)
-                    then (((f x) ((n - #1))) x)
-                    else _(*MissingValue*)))
-      | _ , _ => (error "Prelude.^: negative exponent")
-    end)).
-
-Infix "^" := (__op_zc__) (at level 99).
-
-Notation "'_^_'" := (__op_zc__).
+(* Definition __op_zc__ {a} {b} `{(Num a)} `{(Integral b)} : (a -> (b -> a)) := *)
+(*   (fun __arg_74__ *)
+(*        __arg_75__ => *)
+(*     (match __arg_74__ , __arg_75__ with *)
+(*       | x , 0 => #1 *)
+(*       | x , n => (let f := *)
+(*                    (fix f __arg_71__ __arg_72__ __arg_73__ := (match __arg_71__ *)
+(*                                                                    , __arg_72__ *)
+(*                                                                    , __arg_73__ with *)
+(*                                                                 | _ , 0 , y => y *)
+(*                                                                 | x , n , y => (let g := *)
+(*                                                                                  (fix g __arg_69__ __arg_70__ *)
+(*                                                                                         := (match __arg_69__ *)
+(*                                                                                                 , __arg_70__ with *)
+(*                                                                                              | x , n => (if (even n) *)
+(*                                                                                                         then ((g ((x * *)
+(*                                                                                                                  x))) *)
+(*                                                                                                              ((quot n *)
+(*                                                                                                                     #2))) *)
+(*                                                                                                         else (((f x) ((n *)
+(*                                                                                                                      - *)
+(*                                                                                                                      #1))) *)
+(*                                                                                                              ((x * y)))) *)
+(*                                                                                            end)) *)
+(*                                                                                in ((g x) n)) *)
+(*                                                               end)) *)
+(*                  in (if (n > #0) *)
+(*                     then (((f x) ((n - #1))) x) *)
+(*                     else _(*MissingValue*))) *)
+(*       | _ , _ => (error "Prelude.^: negative exponent") *)
+(*     end)). *)
+
+(* Infix "^" := (__op_zc__) (at level 99). *)
+
+(* Notation "'_^_'" := (__op_zc__). *)
+
+(* Definition __op_zczc__ {a} {b} `{(Fractional a)} `{(Integral b)} *)
+(*   : (a -> (b -> a)) := (fun __arg_76__ *)
+(*                             __arg_77__ => *)
+(*                          (match __arg_76__ , __arg_77__ with *)
+(*                            | x , n => (if (n >= #0) *)
+(*                                       then (x ^ n) *)
+(*                                       else (recip ((x ^ ((#0 - n)))))) *)
+(*                          end)). *)
 
-Definition __op_zczc__ {a} {b} `{(Fractional a)} `{(Integral b)}
-  : (a -> (b -> a)) := (fun __arg_76__
-                            __arg_77__ =>
-                         (match __arg_76__ , __arg_77__ with
-                           | x , n => (if (n >= #0)
-                                      then (x ^ n)
-                                      else (recip ((x ^ ((#0 - n))))))
-                         end)).
+(* Infix "^^" := (__op_zczc__) (at level 99). *)
 
-Infix "^^" := (__op_zczc__) (at level 99).
-
-Notation "'_^^_'" := (__op_zczc__).
+(* Notation "'_^^_'" := (__op_zczc__). *)
 
 Definition __op_zbzb__ : (bool -> (bool -> bool)) := (fun __arg_103__
                                                           __arg_104__ =>
                                                        (match __arg_103__ , __arg_104__ with
-                                                         | Mk_True , _ => Mk_True
-                                                         | Mk_False , x => x
+                                                         | true , _ => true
+                                                         | false , x => x
                                                        end)).
 
-Infix "||" := (__op_zbzb__) (at level 99).
+Infix "||" := (__op_zbzb__).
 
 Notation "'_||_'" := (__op_zbzb__).
 
-Definition or : ((list bool) -> bool) := ((foldr _||_) Mk_False).
+Definition or : ((list bool) -> bool) := ((foldr _||_) false).
 
 Definition __op_zaza__ : (bool -> (bool -> bool)) := (fun __arg_101__
                                                           __arg_102__ =>
                                                        (match __arg_101__ , __arg_102__ with
-                                                         | Mk_True , x => x
-                                                         | Mk_False , _ => Mk_False
+                                                         | true , x => x
+                                                         | false , _ => false
                                                        end)).
 
-Infix "&&" := (__op_zaza__) (at level 99).
+Infix "&&" := (__op_zaza__).
 
 Notation "'_&&_'" := (__op_zaza__).
 
-Definition and : ((list bool) -> bool) := ((foldr _&&_) Mk_True).
+Definition and : ((list bool) -> bool) := ((foldr _&&_) true).
 
 Definition __op_z2218U__ {a} {b} {c}
   : (((b -> c)) -> (((a -> b)) -> (a -> c))) := (fun __arg_92__
@@ -935,28 +971,28 @@
 Definition break {a} : (((a -> bool)) -> ((list a) -> ((list a) * (list a)))) :=
   (fun __arg_188__ => (match __arg_188__ with | p => (span ((not ∘ p))) end)).
 
-Definition lines : (string -> (list string)) := (fix lines __arg_190__
-                                                       := (match __arg_190__ with
-                                                            | "" => nil
-                                                            | s => (match ((break ((fun __arg_189__ =>
-                                                                                    (__arg_189__ == ("
-                                                                                    "%char))))) s) with
-                                                                     | (pair l s') => (l :: (match s' with
-                                                                                        | nil => nil
-                                                                                        | (_ :: s'') => (lines s'')
-                                                                                      end))
-                                                                   end)
-                                                          end)).
-
-Definition words : (string -> (list string)) := (fix words __arg_191__
-                                                       := (match __arg_191__ with
-                                                            | s => (match ((dropWhile _Char.isSpace_) s) with
-                                                                     | "" => nil
-                                                                     | s' => (match ((break _Char.isSpace_) s') with
-                                                                               | (pair w s'') => (w :: (words s''))
-                                                                             end)
-                                                                   end)
-                                                          end)).
+(* Definition lines : (string -> (list string)) := *)
+(*   (fix lines __arg_190__ *)
+(*    := (match __arg_190__ with *)
+(*        | nil => nil *)
+(*        | s => (match ((break ((fun __arg_189__ => *)
+(*                                  (__arg_189__ == ("010"%char : Char))))) s) with *)
+(*                | (pair l s') => (l :: (match s' with *)
+(*                                        | nil => nil *)
+(*                                        | (_ :: s'') => (lines s'') *)
+(*                                        end)) *)
+(*                end) *)
+(*        end)). *)
+
+(* Definition words : (string -> (list string)) := (fix words __arg_191__ *)
+(*                                                        := (match __arg_191__ with *)
+(*                                                             | s => (match ((dropWhile _Char.isSpace_) s) with *)
+(*                                                                      | "" => nil *)
+(*                                                                      | s' => (match ((break _Char.isSpace_) s') with *)
+(*                                                                                | (pair w s'') => (w :: (words s'')) *)
+(*                                                                              end) *)
+(*                                                                    end) *)
+(*                                                           end)). *)
 
 Definition concatMap {a} {b} : (((a -> (list b))) -> ((list a) -> (list b))) :=
   (fun __arg_141__ => (match __arg_141__ with | f => (concat ∘ (map f)) end)).
@@ -1038,32 +1074,32 @@
     end)) }.
 
 Instance __instance__Enum_Char__231__ : (Enum Char) := {
-  toEnum := primIntToChar ;
-  fromEnum := primCharToInt ;
+  toEnum := prim "IntToChar" ;
+  fromEnum := prim "CharToInt" ;
   pred := ((toEnum ∘ ((subtract #1))) ∘ fromEnum) ;
   succ := ((toEnum ∘ ((fun __arg_18__ => (__arg_18__ + #1)))) ∘ fromEnum) }.
 
 Instance __instance__Bounded_Char__232__ : (Bounded Char) := {
   minBound := (" "%char) ;
-  maxBound := primUnicodeMaxChar }.
+  maxBound := prim "UnicodeMaxChar" }.
 
 Instance __instance__Functor_option__233__ : (Functor option) := {
   fmap := (fun __arg_234__
                __arg_235__ =>
     (match __arg_234__ , __arg_235__ with
-      | f , Mk_Nothing => Mk_Nothing
-      | f , (Mk_Just x) => (Mk_Just ((f x)))
+      | f , None => None
+      | f , (Some x) => (Some ((f x)))
     end)) }.
 
 Instance __instance__Monad_option__236__ : (Monad option) := {
   __op_zgzgze__ := (fun __arg_237__
                         __arg_238__ =>
     (match __arg_237__ , __arg_238__ with
-      | (Mk_Just x) , k => (k x)
-      | Mk_Nothing , k => Mk_Nothing
+      | (Some x) , k => (k x)
+      | None , k => None
     end)) ;
-  return_ := Mk_Just ;
-  fail := (fun __arg_239__ => (match __arg_239__ with | s => Mk_Nothing end)) ;
+  return_ := Some ;
+  fail := (fun __arg_239__ => (match __arg_239__ with | s => None end)) ;
   __op_zgzg__ := (fun __arg_53__
                       __arg_54__ =>
     (match __arg_53__ , __arg_54__ with
