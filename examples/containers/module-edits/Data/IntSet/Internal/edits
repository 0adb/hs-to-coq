# These are TODOs:

redefine Definition Data.IntSet.Internal.Nat := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.Prefix := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.BitMap := Coq.Numbers.BinNums.N.
redefine Definition Data.IntSet.Internal.Mask := Coq.Numbers.BinNums.N.

rename type GHC.Types.Int = Coq.Numbers.BinNums.N

# mutual recursion
skip Data.IntSet.Internal.fromDistinctAscList
skip Data.IntSet.Internal.fromAscList

# local termination via the bit mask
termination go in Data.IntSet.Internal.foldlBits {measure (Coq.NArith.BinNat.N.to_nat arg_0__)}
obligations Data.IntSet.Internal.foldlBits BitTerminationProofs.termination_foldl
termination go in Data.IntSet.Internal.foldl'Bits {measure (Coq.NArith.BinNat.N.to_nat arg_0__)}
obligations Data.IntSet.Internal.foldl'Bits BitTerminationProofs.termination_foldl
termination go in Data.IntSet.Internal.foldrBits {measure (Coq.NArith.BinNat.N.to_nat arg_0__)}
obligations Data.IntSet.Internal.foldrBits BitTerminationProofs.termination_foldl
termination go in Data.IntSet.Internal.foldr'Bits {measure (Coq.NArith.BinNat.N.to_nat arg_0__)}
obligations Data.IntSet.Internal.foldr'Bits BitTerminationProofs.termination_foldl

# partial
# no lookupMax,lookupMin replacement
# have minView & maxView, but we are not translating them
skip Data.IntSet.Internal.findMax
skip Data.IntSet.Internal.findMin
skip Data.IntSet.Internal.deleteFindMax
skip Data.IntSet.Internal.deleteFindMin

# This code is dead for well-formed input. Giving an explicit value
# not only get rids of error, but also helps with type class resolution
rewrite forall, GHC.Err.error "minView Nil"  = pair (0%N) Nil
rewrite forall, GHC.Err.error "maxView Nil"  = pair (0%N) Nil


# The idiom `x .&. complement y` does not work at type `nat`, as the complement of
# a natural number is negative. But the expression [x `xor` (x .&. y)] is equivalent:
#
#	 quickCheck $ \x y -> (x .&. complement y) == (x `xor` (x.&.y))
#	 +++ OK, passed 100 tests.
#
# so we can use that:
rewrite forall x y, (x Data.Bits..&. (Data.Bits.complement y)) = (Data.Bits.xor x (x Data.Bits..&. y))

# More complement on N to worry about
rewrite forall x y, Data.Bits.complement (x GHC.Num.+ y) = Coq.NArith.BinNat.N.ldiff (Coq.NArith.BinNat.N.ones (64%N)) (x GHC.Num.+ y)

# More on negate on N to worry about
rewrite forall x y, (GHC.Num.negate x) = Coq.NArith.BinNat.N.ldiff (Coq.NArith.BinNat.N.ones (64%N)) (Coq.NArith.BinNat.N.pred x)

# Avoid the natFromInt, and come up with a simpler definition
# (correctness checked by hand for small values).
redefine Definition Data.IntSet.Internal.branchMask : Prefix -> (Prefix -> Mask) :=
  fun p1 p2 => Coq.NArith.BinNat.N.pow 2 (Coq.NArith.BinNat.N.log2 (Coq.NArith.BinNat.N.lxor p1 p2)).

# indexOfTheOnlyBit uses pointers and ugly stuff
redefine Definition Data.IntSet.Internal.indexOfTheOnlyBit :=
 fun x => Coq.NArith.BinNat.N.log2 x.

# avoid complement
skip Data.IntSet.Internal.prefixBitMask
rewrite forall x, (x Data.Bits..&. Data.IntSet.Internal.prefixBitMask) = Coq.NArith.BinNat.N.ldiff x Data.IntSet.Internal.suffixBitMask

redefine Definition Data.IntSet.Internal.maskW : Nat -> (Nat -> Prefix) :=
  fun i m => Coq.NArith.BinNat.N.ldiff i (((2*m) - 1)%N).


# the revNat function is only correct if its result is cropped to 64 bits.
add Data.IntSet.Internal Definition Data.IntSet.Internal.revNatSafe n := Coq.NArith.BinNat.N.modulo (Data.IntSet.Internal.revNat n) (Coq.NArith.BinNat.N.pow 2 64).
# Use rewrite, not rename, to not change the name of the actual definition
rewrite forall, Data.IntSet.Internal.revNat = Data.IntSet.Internal.revNatSafe



# A bitmask adressing the last 6 bits of an int.
# This is the only place where otherwise the FiniteBits class is used
skip Data.IntSet.Internal.suffixBitMask

# These are typical that they recurse left or right
termination Data.IntSet.Internal.union        {measure ((size_nat arg_0__) + (size_nat arg_1__))}
obligations Data.IntSet.Internal.union        termination_by_omega
termination Data.IntSet.Internal.difference   {measure ((size_nat arg_0__) + (size_nat arg_1__))}
obligations Data.IntSet.Internal.difference   termination_by_omega
termination Data.IntSet.Internal.intersection {measure ((size_nat arg_0__) + (size_nat arg_1__))}
obligations Data.IntSet.Internal.intersection termination_by_omega
termination Data.IntSet.Internal.disjoint     {measure ((size_nat arg_0__) + (size_nat arg_1__))}
obligations Data.IntSet.Internal.disjoint     termination_by_omega

# Show stuff
skip Data.IntSet.Internal.showsBars
skip Data.IntSet.Internal.showsBitMap
skip Data.IntSet.Internal.showBitMap
skip Data.IntSet.Internal.showsTreeHang
skip Data.IntSet.Internal.showTreeWith
skip Data.IntSet.Internal.showBin
skip Data.IntSet.Internal.showWide
skip Data.IntSet.Internal.withBar
skip Data.IntSet.Internal.withEmpty
skip Data.IntSet.Internal.showsTree
skip Data.IntSet.Internal.showTree
skip Data.IntSet.Internal.node

# Data stuff
skip Data.IntSet.Internal.fromListConstr
skip Data.IntSet.Internal.intSetDataType

order Data.IntSet.Internal.Semigroup__IntSet Data.IntSet.Internal.Monoid__IntSet_mappend

skip Data.IntSet.Internal.intFromNat
rewrite forall x, Data.IntSet.Internal.intFromNat x = x
skip Data.IntSet.Internal.natFromInt
rewrite forall x, Data.IntSet.Internal.natFromInt x = x

skip Utils.Containers.Internal.BitUtil.lowestBitMask

skip module Coq.NArith.BinNat.N
