skip module TyCoRep
skip module Coercion
skip module CoAxiom
skip module Type
skip module Unify
skip module TcType
skip module TysWiredIn
skip module RepType


#
# This must stay in sync with the Makefile
#
rename module Class   Combined
rename module TyCon   Combined
rename module DataCon Combined
rename module Var     Combined
rename module IdInfo  Combined
rename module PatSyn  Combined
rename module VarSet  Combined
rename module VarEnv  Combined
rename module CoreSyn Combined

# 
# These are notation (synonyms). So Combined must be imported when they are.
# Instead it is easier to define them as their defns.
#

# rename type Var.Id    = Combined.Var
# rename type Var.TyVar = Combined.Var


#
# Punned constructor values
#
rename value DataCon.HsSrcBang  = Combined.Mk_HsSrcBang
rename value DataCon.EqSpec     = Combined.Mk_EqSpec
rename value Class.Class        = Combined.Mk_Class
rename value Var.Id             = Combined.Mk_Id
rename value Var.TyVar          = Combined.Mk_TyVar
rename value Var.TcTyVar        = Combined.Mk_TcTyVar
rename value IdInfo.IdInfo      = Combined.Mk_IdInfo

rename value IdInfo.DFunId      = Combined.Mk_DFunId
rename value IdInfo.JoinId      = Combined.Mk_JoinId

rename value CoreSyn.Var        = Combined.Mk_Var

## CallStack
rewrite forall x, Combined.idInfo x = @Combined.idInfo tt x

### get rid of some information in the AST
rename type PrimOp.PrimOp           = unit
rename type ForeignCall.ForeignCall = unit
rename type ForeignCall.CType       = unit

## Punning

rename value CoreSyn.IsOrphan  = Combined.Mk_IsOrphan
rename value CoreSyn.RuleEnv   = Combined.Mk_RuleEnv
rename value CoreFVs.FVAnn     = CoreFVs.Mk_FVAnn
rename value CoreSubst.Subst   = CoreSubst.Mk_Subst

rename value Demand.ExnStr = Demand.Mk_ExnStr
rename value Demand.Str = Demand.Mk_Str
rename value Demand.Use = Demand.Mk_Use
rename value Demand.DmdType = Demand.Mk_DmdType
rename value Demand.StrictSig = Demand.Mk_StrictSig
rename value Demand.KillFlags = Demand.Mk_KillFlags



###############################################################################
#
# IdInfo  --- edit out demandInfo, unfoldingIndo, ruleInfo, strictnessInfo from 
#             this data structure
#
rewrite forall x, Combined.zapUsageEnvInfo x = x
rewrite forall x, Combined.zapUsageInfo x    = x
rewrite forall x, Combined.zapUsedOnceInfo x = x
rewrite forall x, Combined.zapDemandInfo x   = x 

rewrite forall x, Combined.setStrictnessInfo x = x
rewrite forall x, Combined.setUnfoldingInfo  x = x
rewrite forall x, Combined.setDemandInfo     x = x

rewrite forall arg dmd, Combined.setDemandInfo arg dmd = arg
rewrite forall arg dmd, Combined.setStrictnessInfo arg dmd = arg
rewrite forall arg dmd, Combined.setUnfoldingInfo arg dmd = arg

rewrite forall x, Combined.ruleInfoFreeVars x = FV.emptyFVs

rewrite forall x, Combined.unfoldInfo x = tt

rewrite forall x, Combined.sel_tycon x = tt

#
# Id -- 
#
rewrite forall arg y, Id.setIdUnfolding arg y = arg
rewrite forall x, Id.idType x = tt


###############################################################################


# bruttaly skipping all type info
### get rid of type information in the AST

rename type TcType.TcTyVarDetails = unit
redefine Definition Combined.tcTyVarDetails : TyVar -> unit := fun x => tt.

# type used in DataCon
rename type MkId.DataConBoxer = unit

rename type TyCoRep.Coercion      = unit
rename type TyCoRep.Type_         = unit
rename type TyCoRep.ThetaType     = unit
rename type TyCoRep.TyBinder      = unit
rename type TyCoRep.TyThing       = unit
rename type TyCoRep.Kind          = unit
rename type TyCoRep.PredType      = unit

rename type TyCoRep.TvSubstEnv    = unit
rename type TyCoRep.CvSubstEnv    = unit
rename type TyCoRep.TCvSubst      = unit

rename type CoAxiom.CoAxiom = list
rename type CoAxiom.Branched = unit
rename type CoAxiom.Unbranched = unit
rename type CoAxiom.BuiltInSynFamily = unit
rename type CoAxiom.Role = unit
rename value CoAxiom.Representational = tt
rename value CoAxiom.Nominal = tt
rename value TysWiredIn.liftedTypeKind = tt
rename value TysWiredIn.constraintKind = tt

## Could make these unit too.
redefine Inductive TyCon.RuntimeRepInfo     : Type := TyCon.Mk_RuntimeRepInfo_Dummy.
redefine Inductive MkId.DataConBoxer        : Type := MkId.Mk_DataConBoxer_Dummy.
redefine Inductive CoAxiom.CoAxiomRule      : Type := CoAxiom.Mk_CoAxiomRule_Dummy.
redefine Inductive CoAxiom.BuiltInSynFamily : Type := CoAxiom.Mk_BuiltInSynFamily_Dummy.

## rewrite things that are unit to tt

# rewrite forall x, Combined.mkTyArg x = Combined.Type_ tt
rewrite forall x, TyCoRep.mkTyVarTy x = tt
rewrite forall v, Coercion.mkCoVarCo v = tt
rewrite forall rhs, CoreUtils.exprType rhs = tt

rewrite forall x, TyCoRep.isCoercionType x = false


#
rewrite forall var,    Combined.isTyCoVar var = false
rewrite forall env x,  TyCoRep.tidyType env x = tt
rewrite forall env co, TyCoRep.tidyCo env co = tt

#
# No unfolding / rules in IdInfo
#
rewrite forall x, CoreSyn.isEvaldUnfolding x = false
rewrite forall x, Combined.isStableUnfolding x = false
