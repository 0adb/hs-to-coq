skip module TyCoRep
skip module Coercion
skip module CoAxiom
skip module Type
skip module Unify
skip module TcType
skip module TysWiredIn
skip module RepType

## CallStack
rewrite forall x, Var.idInfo x = @Var.idInfo tt x

### get rid of some information in the AST
rename type PrimOp.PrimOp           = unit
rename type ForeignCall.ForeignCall = unit
rename type ForeignCall.CType       = unit

## Punning
rename value Var.Id            = Var.Mk_Id
rename value Var.TyVar         = Var.Mk_TyVar
rename value Var.TcTyVar       = Var.Mk_TcTyVar

rename value CoreSyn.IsOrphan  = CoreSyn.Mk_IsOrphan
rename value CoreSyn.RuleEnv   = CoreSyn.Mk_RuleEnv
rename value DataCon.HsSrcBang = DataCon.Mk_HsSrcBang
rename value DataCon.EqSpec    = DataCon.Mk_EqSpec
rename value Class.Class       = Class.Mk_Class
rename value CoreFVs.FVAnn     = CoreFVs.Mk_FVAnn
rename value CoreSubst.Subst   = CoreSubst.Mk_Subst
rename value IdInfo.IdInfo     = IdInfo.Mk_IdInfo


###############################################################################
#
# IdInfo  --- edit out demandInfo, unfoldingIndo, ruleInfo, strictnessInfo from 
#             this data structure
#
rewrite forall x, IdInfo.zapUsageEnvInfo x = x
rewrite forall x, IdInfo.zapUsageInfo x    = x
rewrite forall x, IdInfo.zapUsedOnceInfo x = x
rewrite forall x, IdInfo.zapDemandInfo x   = x 

rewrite forall x, IdInfo.setStrictnessInfo x = x
rewrite forall x, IdInfo.setUnfoldingInfo  x = x
rewrite forall x, IdInfo.setDemandInfo     x = x

rewrite forall arg dmd, IdInfo.setDemandInfo arg dmd = arg
rewrite forall arg dmd, IdInfo.setStrictnessInfo arg dmd = arg
rewrite forall arg dmd, IdInfo.setUnfoldingInfo arg dmd = arg

rewrite forall x, IdInfo.ruleInfoFreeVars x = FV.emptyFVs


#
# Id -- 
#
rewrite forall arg y, Id.setIdUnfolding arg y = arg


###############################################################################


# bruttaly skipping all type info
### get rid of type information in the AST

rename type TcType.TcTyVarDetails = unit
redefine Definition Var.tcTyVarDetails : TyVar -> unit := fun x => tt.

# type used in DataCon
rename type MkId.DataConBoxer = unit

rename type TyCoRep.Coercion      = unit
rename type TyCoRep.Type_         = unit
rename type TyCoRep.ThetaType     = unit
rename type TyCoRep.TyBinder      = unit
rename type TyCoRep.TyThing       = unit
rename type TyCoRep.Kind          = unit
rename type TyCoRep.PredType      = unit

rename type TyCoRep.TvSubstEnv    = unit
rename type TyCoRep.CvSubstEnv    = unit
rename type TyCoRep.TCvSubst      = unit

rename type CoAxiom.CoAxiom = list
rename type CoAxiom.Branched = unit
rename type CoAxiom.Unbranched = unit
rename type CoAxiom.BuiltInSynFamily = unit
rename type CoAxiom.Role = unit
rename value CoAxiom.Representational = tt
rename value CoAxiom.Nominal = tt
rename value TysWiredIn.liftedTypeKind = tt


## Could make these unit too.
redefine Inductive TyCon.RuntimeRepInfo     : Type := TyCon.Mk_RuntimeRepInfo_Dummy.
redefine Inductive MkId.DataConBoxer        : Type := MkId.Mk_DataConBoxer_Dummy.
redefine Inductive CoAxiom.CoAxiomRule      : Type := CoAxiom.Mk_CoAxiomRule_Dummy.
redefine Inductive CoAxiom.BuiltInSynFamily : Type := CoAxiom.Mk_BuiltInSynFamily_Dummy.

## rewrite things that are unit to tt

rewrite forall x, CoreSyn.mkTyArg x = CoreSyn.Type_ tt
rewrite forall x, TyCoRep.mkTyVarTy x = tt
rewrite forall v, Coercion.mkCoVarCo v = tt
rewrite forall rhs, CoreUtils.exprType rhs = tt

rewrite forall x, TyCoRep.isCoercionType x = false

rewrite forall x, Id.idType x = tt
rewrite forall x, IdInfo.sel_tycon x = tt
