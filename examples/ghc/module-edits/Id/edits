

axiomatize definition Id.isStateHackType

redefine Definition Id.idCoreRules : Core.Id -> list (Core.CoreRule) 
   := fun x => nil.

axiomatize definition Id.zapFragileIdInfo
axiomatize definition Id.zapIdUsageEnvInfo

# Type/TyCoRep
axiomatize definition Id.isStrictId
axiomatize definition Id.isDictId
axiomatize definition Id.idRepArity
axiomatize definition Id.isEvVar	


# RepType
skip Id.idFunRepArity
skip Id.setCaseBndrEvald

# Needs `GHC.Prim.seq`, used to evaluate the type information strictly
# however, we are removing all type information so no need to do so.
# axiomatize definition Id.setIdType

in Id.setIdType rewrite forall x y, GHC.Prim.seq x y = y

# figure out GHC.Num.Int representation
#
axiomatize definition Id.mkTemplateLocal 
axiomatize definition Id.mkTemplateLocalsNum
axiomatize definition Id.mkTemplateLocals 

#
# skipping type and coercion variables
#
# TODO: can we justify this edit? let's skip the whole thing 
# in Id.mkLocalIdOrCoVarWithInfo rewrite forall ty, TyCoRep.isCoercionType ty = false
skip Id.mkLocalIdOrCoVarWithInfo
skip Id.mkLocalIdOrCoVar
skip Id.mkSysLocalOrCoVar
skip Id.mkSysLocalOrCoVarM
skip Id.mkUserLocalOrCoVar
skip Id.mkWorkerId
skip Id.mkLocalCoVar 

