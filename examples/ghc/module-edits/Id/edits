rename type Var.Id    = Combined.Var
rename type Var.TyVar = Combined.Var


##############
### NEEDED for Exitify
# Id.asJoinId Id.idJoinArity Id.isJoinId Id.isJoinId_maybe
# Id.mkSysLocal Id.setIdOccInfo
#
# NEEDED for CoreFVs
# Id.idCoreRules Id.idSpecialisation Id.realIdUnfolding
# 
# NEEDED for CoreArity
# Id.idArity Id.idStateHackOneShotInfo Id.idStrictness Id.isJoinId
# Id.mkSysLocalOrCoVar Id.typeOneShot
##############

rewrite forall x, Combined.pprIdDetails x = Panic.someSDoc


## Rewrites due to skipped functions (here)

# rewrite forall x,     Id.idType x = tt
# rewrite forall arg y, Id.setIdUnfolding arg y = arg


## Local rewrites 

# rewrite forall dc, Combined.isUnboxedTupleCon dc          =  Combined.isUnboxedTupleCon (lookupDataCon dc)
# rewrite forall dc, Combined.isUnboxedSumCon dc            = Combined.isUnboxedSumCon (lookupDataCon dc))

# in Id.isClassOpId_maybe rewrite forall cls, Some cls     = Some (lookupClass cls)
# in Id.isDataConId_maybe rewrite forall con, Some con     = Some (lookupDataCon con)
# in Id.isDataConWorkId_maybe rewrite forall con, Some con = Some (lookupDataCon con)

in Id.isJoinId_maybe rewrite forall str id x, Outputable.assertPprPanic str id x = None

in Id.transferPolyIdInfo rewrite forall x y, Demand.increaseStrictSigArity x y = tt

## enumFrom
in Id.mkTemplateLocalsNum rewrite forall n tys, enumFrom n = (GHC.Enum.enumFromTo n (GHC.List.length tys))  

##################################



# TODO: add an edit for axiomatizing a single function 
# isStateHackType is a Parameter in the midamble
skip Id.isStateHackType

# Missing parts of IdInfo
skip Id.isNeverLevPolyId 
skip Id.zapFragileIdInfo
skip Id.zapIdUsageEnvInfo

skip Id.idCoreRules
skip Id.idStrictness   
skip Id.isBottomingId

# Type/TyCoRep
skip Id.isStrictId
skip Id.isDictId
skip Id.idRepArity
skip Id.isEvVar	
skip Id.mkLocalCoVar

# RepType
skip Id.idFunRepArity

# Demand

skip Id.idDemandInfo
skip Id.zapIdDemandInfo

# CoreSyn (Unfolding)

skip Id.idUnfolding
skip Id.setIdUnfolding
skip Id.setIdUnfoldingLazily
skip Id.realIdUnfolding
skip Id.zapStableUnfolding

skip Id.setCaseBndrEvald

# Needs `GHC.Prim.seq`, used to evaluate the type information strictly
# however, we are removing all type information so no need to do so.
skip Id.setIdType
# in Id.setIdType rewrite forall ty, GHC.Prim.seq (Type.seqType ty) = Datatypes.id

