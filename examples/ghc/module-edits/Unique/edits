# We need to store Ns in IntMap
skip module Coq.ZArith.BinInt.Z
skip module Coq.NArith.BinNat.N


# chars
skip Unique.finish_show
skip Unique.iToBase62
skip Unique.showUnique

# outputtable
skip Unique.pprUnique
skip Unique.pprUniqueAlways


add Unique Definition Unique.getWordKey : Unique.Unique -> GHC.Num.Word := Unique.getKey.

# Avoid use of the FiniteBits type class
redefine Definition Unique.uNIQUE_BITS : GHC.Num.Int := GHC.Num.fromInteger 56.

# need a type edit
redefine Definition Unique.uniqueMask : GHC.Num.Int :=
  GHC.Num.op_zm__ (Data.Bits.shiftL (GHC.Num.fromInteger 1) Unique.uNIQUE_BITS)
   (GHC.Num.fromInteger 1).

redefine Definition Unique.mkUnique : GHC.Char.Char -> (GHC.Num.Word -> Unique) := fun c i =>
    let bits := (Coq.ZArith.BinInt.Z.land (Coq.ZArith.BinInt.Z.of_N i) Unique.uniqueMask) in
    let tag := Data.Bits.shiftL (GHC.Base.ord c) Unique.uNIQUE_BITS in
    MkUnique (Coq.ZArith.BinInt.Z.to_N (Coq.ZArith.BinInt.Z.lor tag bits)). 

redefine Definition Unique.unpkUnique : Unique -> (GHC.Char.Char * GHC.Num.Int) :=
  fun y => match y with | (MkUnique u) =>
    let i := (Coq.ZArith.BinInt.Z.land (Coq.ZArith.BinInt.Z.of_N  u) Unique.uniqueMask) in
    let tag := GHC.Char.chr (Data.Bits.shiftR (Coq.ZArith.BinInt.Z.of_N u) Unique.uNIQUE_BITS) in pair tag i
        end.


# unused
skip Unique.newTagUnique


order Unique.Eq___Unique Unique.hasKey Ord__Unique
