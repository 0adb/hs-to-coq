# chars
skip Unique.finish_show
skip Unique.iToBase62
skip Unique.showUnique

# outputtable
skip Unique.pprUnique
skip Unique.pprUniqueAlways

order Unique.Eq___Unique Unique.hasKey Ord__Unique

redefine Inductive Unique.Unique : Type := MkUnique : GHC.Num.Word -> Unique.

# Avoid use of the FiniteBits type class
redefine Definition Unique.uNIQUE_BITS : GHC.Num.Int := GHC.Num.fromInteger 56.

# need a type edit
redefine Definition Unique.uniqueMask : GHC.Num.Int :=
  GHC.Num.op_zm__ (Data.Bits.shiftL (GHC.Num.fromInteger 1) Unique.uNIQUE_BITS)
   (GHC.Num.fromInteger 1).


# We need to store Ns in IntMap
skip module Coq.ZArith.BinInt.Z
skip module Coq.NArith.BinNat.N

add Unique Definition Unique.getWordKey : Unique.Unique -> GHC.Num.Word := fun u =>  Coq.NArith.BinNat.N.of_nat (Unique.getKey u).


redefine Definition Unique.getKey : Unique -> nat := 
   fun y => match y with | (MkUnique x) => Coq.NArith.BinNatDef.N.to_nat x end.

redefine Definition Unique.mkUniqueGrimily : nat -> Unique :=
  fun n => MkUnique (Coq.NArith.BinNat.N.of_nat n).

redefine Definition Unique.stepUnique : Unique -> (GHC.Num.Word -> Unique) := fun arg_0__ arg_1__ =>
    match arg_0__, arg_1__ with
    | MkUnique i, n => MkUnique (GHC.Num.op_zp__ i n)
    end.

skip Unique.mkUnique
# redefine Definition Unique.mkUnique : GHC.Char.Char -> (nat -> Unique) := fun c i =>
#    let bits := (Coq.NArith.BinNat.N.land (Coq.NArith.BinNat.N.of_nat i) Unique.uniqueMask) in
#    let tag := Data.Bits.shiftL (GHC.Base.ord c) Unique.uNIQUE_BITS in
#    MkUnique (Coq.NArith.BinNat.N.lor (Coq.ZArith.BinInt.Z.to_N tag) bits). 


redefine Definition Unique.unpkUnique : Unique -> (GHC.Char.Char * GHC.Num.Int) :=
  fun y => match y with | (MkUnique u) =>
    let i := (Coq.ZArith.BinInt.Z.land (Coq.ZArith.BinInt.Z.of_N  u) Unique.uniqueMask) in
    let tag := GHC.Char.chr (Data.Bits.shiftR (Coq.ZArith.BinInt.Z.of_N u) Unique.uNIQUE_BITS) in pair tag i
        end.

redefine Definition Unique.deriveUnique : Unique -> (nat -> Unique) :=
  fun arg_0__ arg_1__ =>
    match arg_0__, arg_1__ with
    | MkUnique i, delta => Unique.mkUnique (GHC.Char.hs_char__ "X") 
                                   (GHC.Num.op_zp__ (NArith.BinNat.N.to_nat i) delta)
    end.


# unused
skip Unique.newTagUnique


