rewrite forall x, andb Util.debugIsOn x = false
rewrite forall s n d, Outputable.assertPprPanic s n d = GHC.Err.error d

# Break dependency on CoreSyn module
# rename type CoreSyn.Unfolding = unit
# rename value CoreSyn.noUnfolding = tt

# Break dependency on Demand module
rename type Demand.StrictSig  = unit
rename type Demand.Demand     = unit
rename value Demand.nopSig    = tt
rename value Demand.topDmd    = tt
rewrite forall x, Demand.isStrictDmd x       = false
rewrite forall x, Demand.hasDemandEnvSig x   = false
rewrite forall x, Demand.zapUsageDemand x    = tt
rewrite forall x, Demand.zapUsedOnceDemand x = tt
rewrite forall x, Demand.zapUsedOnceSig x    = tt


## parameterized in the preamble.v
skip Core.RuleInfo
skip Core.emptyRuleInfo
skip Core.isEmptyRuleInfo 

skip Core.ruleInfoFreeVars
skip Core.ruleInfoRules
skip Core.setRuleInfoHead

# needs a default for RecSelParent *before* one can be 
# provided in the midamble
skip Core.sel_tycon

## Operations on IdInfo
## 
## If we need these, we need to move them elsewhere
##
skip Core.zapUsageEnvInfo

## needs CoreSyn.isFragileUnfolding
skip Core.zapFragileUnfolding
skip Core.zapFragileInfo

## needs Type.resultIdLevPoly
skip Core.setLevityInfoWithType
skip Core.isNeverLevPolyIdInfo

## Printing

skip Core.pprArityInfo
skip Core.pprCafInfo
skip Core.pprIdDetails
skip Core.pprStrictness
skip Core.ppArityInfo
skip Core.ppCafInfo 

order Core.Eq___CafInfo Core.Ord__CafInfo

order Core.Eq___TyCon Core.Eq___RecSelParent_op_zeze__
