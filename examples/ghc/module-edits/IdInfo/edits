skip module CoreSyn
skip module VarSet
skip module Var
skip module Demand

rewrite forall x, andb Util.debugIsOn x = false
rewrite forall s n d, Outputable.assertPprPanic s n d = GHC.Err.error d

# Break dependency on CoreSyn module
rename type CoreSyn.Unfolding = unit
rename value CoreSyn.noUnfolding = tt

# Break dependency on Demand module
rename type Demand.StrictSig  = unit
rename type Demand.Demand     = unit
rename value Demand.nopSig    = tt
rename value Demand.topDmd    = tt
rewrite forall x, Demand.isStrictDmd x       = false
rewrite forall x, Demand.hasDemandEnvSig x   = false
rewrite forall x, Demand.zapUsageDemand x    = tt
rewrite forall x, Demand.zapUsedOnceDemand x = tt
rewrite forall x, Demand.zapUsedOnceSig x    = tt

## doesn't do anything
rewrite forall x, IdInfo.zapUsageEnvInfo x = x
rewrite forall x, IdInfo.zapUsageInfo x    = x
rewrite forall x, IdInfo.zapUsedOnceInfo x = x

# punned
rename value IdInfo.IdInfo = IdInfo.Mk_IdInfo


## Rename local usages
##
## The RHSs are defined in the preamble.v
##
rename type Class.Class     = ClassId
rename type DataCon.DataCon = DataConId
rename type PatSyn.PatSyn   = PatSynId
rename type TyCon.TyCon     = TyConId

## parameterized in the preamble.v
skip IdInfo.RuleInfo
skip IdInfo.emptyRuleInfo
skip IdInfo.isEmptyRuleInfo 

skip IdInfo.ruleInfoFreeVars
skip IdInfo.ruleInfoRules
skip IdInfo.setRuleInfoHead

# needs a default for RecSelParent *before* one can be 
# provided in the midamble
skip IdInfo.sel_tycon

## Operations on IdInfo
## 
## If we need these, we need to move them elsewhere
##
skip IdInfo.zapUsageEnvInfo

## needs CoreSyn.isFragileUnfolding
skip IdInfo.zapFragileUnfolding
skip IdInfo.zapFragileInfo

## needs Type.resultIdLevPoly
skip IdInfo.setLevityInfoWithType
skip IdInfo.isNeverLevPolyIdInfo

## Printing

skip IdInfo.pprArityInfo
skip IdInfo.pprCafInfo
skip IdInfo.pprIdDetails
skip IdInfo.pprStrictness
skip IdInfo.ppArityInfo
skip IdInfo.ppCafInfo 

order IdInfo.Eq___CafInfo IdInfo.Ord__CafInfo
