rewrite forall x, andb Util.debugIsOn x = false
rewrite forall s n d, Outputable.assertPprPanic s n d = GHC.Err.error d

# Break dependency on CoreSyn module
# rename type CoreSyn.Unfolding = unit
# rename value CoreSyn.noUnfolding = tt

# Break dependency on Demand module
rename type Demand.StrictSig  = unit
rename type Demand.Demand     = unit
rename value Demand.nopSig    = tt
rename value Demand.topDmd    = tt
rewrite forall x, Demand.isStrictDmd x       = false
rewrite forall x, Demand.hasDemandEnvSig x   = false
rewrite forall x, Demand.zapUsageDemand x    = tt
rewrite forall x, Demand.zapUsedOnceDemand x = tt
rewrite forall x, Demand.zapUsedOnceSig x    = tt


## parameterized in the preamble.v
skip Combined.RuleInfo
skip Combined.emptyRuleInfo
skip Combined.isEmptyRuleInfo 

skip Combined.ruleInfoFreeVars
skip Combined.ruleInfoRules
skip Combined.setRuleInfoHead

# needs a default for RecSelParent *before* one can be 
# provided in the midamble
skip Combined.sel_tycon

## Operations on IdInfo
## 
## If we need these, we need to move them elsewhere
##
skip Combined.zapUsageEnvInfo

## needs CoreSyn.isFragileUnfolding
skip Combined.zapFragileUnfolding
skip Combined.zapFragileInfo

## needs Type.resultIdLevPoly
skip Combined.setLevityInfoWithType
skip Combined.isNeverLevPolyIdInfo

## Printing

skip Combined.pprArityInfo
skip Combined.pprCafInfo
skip Combined.pprIdDetails
skip Combined.pprStrictness
skip Combined.ppArityInfo
skip Combined.ppCafInfo 

order Combined.Eq___CafInfo Combined.Ord__CafInfo

order Combined.Eq___TyCon Combined.Eq___RecSelParent_op_zeze__
