skip module PprCore
skip module Data.ByteString
skip module ErrUtils
skip module OccurAnal
skip module CoreSeq

rename type Var.Id    = Combined.Var
rename type Var.TyVar = Combined.Var


###################################################
# TODO: seq
#
in CoreSubst.substUnfolding rewrite forall x y, GHC.Prim.seq x y = y

###################################################
#
# These edits get rid of all of the substitutions for tyvars and covars
#
#

rewrite forall v, Combined.isCoVar v = false
rewrite forall v, Combined.isTyVar v = false
rewrite forall v, Combined.isId fv   = true

rewrite forall x t, Id.setIdType x t = x

rewrite forall s x m , TyCoRep.tyCoFVsOfType s x m  = id

#
# These are easier to redefine than to rewrite
#
redefine Definition CoreSubst.emptySubst : Subst :=
  Mk_Subst Combined.emptyInScopeSet Combined.emptyVarEnv tt tt.

redefine Definition CoreSubst.mkEmptySubst : Combined.InScopeSet -> Subst :=
  fun in_scope =>
    Mk_Subst in_scope Combined.emptyVarEnv tt tt.

redefine Definition CoreSubst.substTyVarBndr : 
			Subst -> (Combined.Var -> (Subst * Combined.Var)) :=
  fun s v => pair s v.

redefine Definition CoreSubst.zapSubstEnv : Subst -> Subst :=
  fun x => match x with | (Mk_Subst in_scope _ _ _) =>
    Mk_Subst in_scope Combined.emptyVarEnv tt tt end.


# In midamble, hard to redefine and hard to rewrite
#
skip CoreSubst.mkOpenSubst

#
# Yuck! 
#
in CoreSubst.delBndrs rewrite forall, (Combined.delVarEnvList tvs vs) = tt
in CoreSubst.delBndrs rewrite forall, (Combined.delVarEnvList cvs vs) = tt

in CoreSubst.extendInScope rewrite forall, (Combined.delVarEnv tvs v) = tt
in CoreSubst.extendInScope rewrite forall, (Combined.delVarEnv cvs v) = tt

in CoreSubst.extendInScopeList rewrite forall, (Combined.delVarEnvList tvs vs) = tt
in CoreSubst.extendInScopeList rewrite forall, (Combined.delVarEnvList cvs vs) = tt

in CoreSubst.isEmptySubst rewrite forall, (Combined.isEmptyVarEnv tv_env) = true
in CoreSubst.isEmptySubst rewrite forall, (Combined.isEmptyVarEnv cv_env) = true

in CoreSubst.substIdBndr rewrite forall, Combined.isEmptyVarEnv tvs = true 
in CoreSubst.substIdBndr rewrite forall, Combined.isEmptyVarEnv cvs = true
in CoreSubst.substIdBndr rewrite forall x, TyCoRep.noFreeVarsOfType x = true

in CoreSubst.substIdInfo rewrite forall x, Combined.isEmptyRuleInfo x = true
in CoreSubst.substIdInfo rewrite forall x, Combined.isFragileUnfolding x = false

in CoreSubst.substIdType rewrite forall, Combined.isEmptyVarEnv tv_env = true
in CoreSubst.substIdType rewrite forall, Combined.isEmptyVarEnv cv_env = true
in CoreSubst.substIdType rewrite forall old_ty, TyCoRep.noFreeVarsOfType old_ty = true

skip CoreSubst.extendCvSubst
rewrite forall s v t, CoreSubst.extendCvSubst s v t = s

skip CoreSubst.extendTvSubst
rewrite forall s v t, CoreSubst.extendTvSubst s v t = s

skip CoreSubst.extendTvSubstList
rewrite forall s vs, CoreSubst.extendTvSubstList s vs = s

skip CoreSubst.getTCvSubst
rewrite forall s, CoreSubst.getTCvSubst s = tt

skip CoreSubst.substCo
rewrite forall s c, CoreSubst.substCo s c = tt

skip CoreSubst.substTy
rewrite forall s c, CoreSubst.substTy s c = tt

skip CoreSubst.lookupTCvSubst
rewrite forall s v, CoreSubst.lookupTCvSubst s c = tt

skip CoreSubst.substSpec
rewrite forall s x id, CoreSubst.substSpec s x id = id

skip CoreSubst.substCoVarBndr
rewrite forall s x b, CoreSubst.substCoVarBndr s x b = b

skip CoreSubst.cloneTyVarBndr



#
## Fixes for mutual recursion (subst_expr/substBind/substIdBndr)
#
#
# These two require recursive knot tying
#
in CoreSubst.substRecBndrs rewrite forall x, CoreSubst.substIdBndr x new_subst = substIdBndr x GHC.Err.default
in CoreSubst.cloneRecIdBndrs rewrite forall, CoreSubst.clone_id subst' = CoreSubst.clone_id GHC.Err.default
#
# Pairs are awful!!
#
in CoreSubst.substBind rewrite forall x rhss, GHC.Base.map (CoreSubst.subst_expr x subst') rhss = GHC.Base.map (fun ps => CoreSubst.subst_expr x subst' (snd ps)) pairs

