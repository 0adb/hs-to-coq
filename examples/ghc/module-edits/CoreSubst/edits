import module GHC.Base


axiomatize definition CoreSubst.substTyVarBndr 
axiomatize definition CoreSubst.substCoVarBndr 
axiomatize definition CoreSubst.extendCvSubst  
axiomatize definition CoreSubst.extendTvSubst  
axiomatize definition CoreSubst.extendTvSubstList
axiomatize definition CoreSubst.getTCvSubst 
axiomatize definition CoreSubst.substCo 
axiomatize definition CoreSubst.substTy
axiomatize definition CoreSubst.substSpec 
axiomatize definition CoreSubst.lookupTCvSubst 
axiomatize definition CoreSubst.cloneTyVarBndr 


# cannot translate because we don't have unfolding information

redefine Definition CoreSubst.substUnfolding : Subst -> (Core.Unfolding -> Core.Unfolding) := fun s u => u.


#############################################################################
#  Edits that just make the translation go through
#############################################################################

#
## Fixes for mutual recursion (subst_expr/substBind/substIdBndr)
#
#
# These two require recursive knot tying
#
in CoreSubst.substRecBndrs rewrite forall x, CoreSubst.substIdBndr x new_subst = CoreSubst.substIdBndr x (GHC.Err.error Panic.someSDoc)
in CoreSubst.cloneRecIdBndrs rewrite forall, CoreSubst.clone_id subst' = CoreSubst.clone_id (GHC.Err.error Panic.someSDoc)
#
# Pairs are awful!!
#
in CoreSubst.substBind rewrite forall x rhss, GHC.Base.map (CoreSubst.subst_expr x subst') rhss = GHC.Base.map (fun ps => CoreSubst.subst_expr x subst' (snd ps)) pairs


