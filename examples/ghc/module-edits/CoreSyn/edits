skip module CostCentre

redefine Inductive CoreSyn.Tickish (id : Type) : Type := Mk_Tickish_Dummy.
redefine Local Definition CoreSyn.Eq___Tickish_op_zeze__ {inst_id} `{_:GHC.Base.Eq_ inst_id}
    : (Tickish inst_id) -> ((Tickish inst_id) -> bool) := fun x y => true.
redefine Local Definition CoreSyn.Eq___Tickish_op_zsze__ {inst_id} `{_:GHC.Base.Eq_ inst_id}
    : (Tickish inst_id) -> ((Tickish inst_id) -> bool) := fun x y => false.
skip CoreSyn.mkNoCount
skip CoreSyn.mkNoScope
skip CoreSyn.tickishCanSplit
skip CoreSyn.tickishCounts
skip CoreSyn.tickishIsCode
skip CoreSyn.tickishContains
skip CoreSyn.tickishScopesLike
skip CoreSyn.tickishFloatable

# record selector, no place to add default
skip CoreSyn.uf_tmpl
skip CoreSyn.unfoldingTemplate
skip CoreSyn.ru_rhs

order CoreSyn.Eq___AltCon CoreSyn.Ord__AltCon
order CoreSyn.Eq___Tickish CoreSyn.Ord__Tickish

redefine Definition CoreSyn.chooseOrphanAnchor (local_names : list Name.Name) : IsOrphan :=
    match  GHC.Base.map Name.nameOccName local_names with
    | cons hd tl => NotOrphan (Data.Foldable.foldr GHC.Base.min hd tl)
    | nil => Mk_IsOrphan
    end.

# uses Outputtable.empty in panicStr
# in midamble
skip CoreSyn.exprToType

# piResultTy is in module Type
# in midamble
skip CoreSyn.applyTypeToArg


# needs GHC.Types.Double & other types ( GHC.Types.Float, GHC.Int.Int64)
skip CoreSyn.mkDoubleLitDouble
skip CoreSyn.mkFloatLitFloat
skip CoreSyn.mkInt64LitInt64

# needs Literal.mkMachInt
skip CoreSyn.mkIntLit
skip CoreSyn.mkIntLitInt
# Literal.mlMachWord64, Literal.mkMachWOrd
skip CoreSyn.mkWord64LitWord64
skip CoreSyn.mkWordLit
skip CoreSyn.mkWordLitWord

# in midamble (due to mutual recursion)
skip CoreSyn.deAnnotate'
skip CoreSyn.collectAnnArgs
skip CoreSyn.deTagExpr

# needs a default constraint, as well as a termination argument
skip CoreSyn.collectNAnnBndrs
# in CoreSyn.collectNAnnBndrs    termination collect { measure (BinIntDef.Z.to_nat arg_0__)   }
# obligations CoreSyn.collectNAnnBndrs admit


in CoreSyn.collectAnnArgsTicks termination go      { measure (size (snd arg_0__)) }
obligations CoreSyn.collectAnnArgsTicks admit
in CoreSyn.collectAnnBndrs     termination collect { measure (size (snd arg_1__)) }
obligations CoreSyn.collectAnnBndrs admit

skip CoreSyn.mkTyArg


