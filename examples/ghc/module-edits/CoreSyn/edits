#
# This would be better if we had a rewrite for types
#
redefine Inductive Core.Unfolding : Type := Mk_Unfolding.

rewrite forall , Core.BootUnfolding = getUnfolding Core.BootUnfolding
rewrite forall , Core.OtherCon      = fun x => getUnfolding (Core.OtherCon x)
rewrite forall , Core.NoUnfolding   = getUnfolding Core.NoUnfolding

redefine Definition Core.hasSomeUnfolding : Core.Unfolding -> bool :=
  fun arg_0__ =>
    match Core.getUnfoldingInfo arg_0__ with
    | Core.NoUnfolding => false
    | Core.BootUnfolding => false
    | _ => true
    end.

redefine Definition Core.isBootUnfolding : Core.Unfolding -> bool :=
  fun arg_0__ => match Core.getUnfoldingInfo arg_0__ with | Core.BootUnfolding => true | _ => false end.

redefine Definition Core.otherCons : Core.Unfolding -> (list Core.AltCon) :=
  fun arg_0__ => match Core.getUnfoldingInfo arg_0__ with | Core.OtherCon cons_ => cons_ | _ => nil end.



skip module CostCentre
rename type CostCentre.CostCentre = unit

skip Core.mkNoCount
skip Core.mkNoScope
skip Core.tickishCanSplit
skip Core.tickishCounts
skip Core.tickishIsCode
skip Core.tickishContains
skip Core.tickishScopesLike
skip Core.tickishFloatable

# record selector, no place to add default
skip Core.uf_tmpl
skip Core.unfoldingTemplate
skip Core.ru_rhs

order Core.Eq___DataCon Core.Eq___AltCon_op_zeze__ Core.Eq___AltCon Core.Ord__AltCon
order Core.Eq___Tickish Core.Ord__Tickish

redefine Definition Core.chooseOrphanAnchor (local_names : list Name.Name) : IsOrphan :=
    match  GHC.Base.map Name.nameOccName local_names with
    | cons hd tl => NotOrphan (Data.Foldable.foldr GHC.Base.min hd tl)
    | nil => Mk_IsOrphan
    end.

# uses Outputable.empty in panicStr
# in midamble
skip Core.exprToType

# piResultTy is in module Type
# in midamble
skip Core.applyTypeToArg


# needs GHC.Types.Double & other types ( GHC.Types.Float, GHC.Int.Int64)
skip Core.mkDoubleLitDouble
skip Core.mkFloatLitFloat
skip Core.mkInt64LitInt64

# needs Literal.mkMachInt
skip Core.mkIntLit
skip Core.mkIntLitInt
# needs Literal.mlMachWord64, Literal.mkMachWOrd
skip Core.mkWord64LitWord64
skip Core.mkWordLit
skip Core.mkWordLitWord

# ANTALSZ
# in midamble (due to mutual recursion)
skip Core.deAnnotate'
skip Core.collectAnnArgs
skip Core.deTagExpr

# needs a default constraint, as well as a termination argument
# in midamble
skip Core.collectNAnnBndrs
# in Core.collectNAnnBndrs    termination collect { measure (arg_0__)   }
# obligations Core.collectNAnnBndrs admit


in Core.collectAnnArgsTicks termination go      { measure (size_AnnExpr' (snd arg_0__)) }
obligations Core.collectAnnArgsTicks solve_collectAnnArgsTicks
in Core.collectAnnBndrs     termination collect { measure (size_AnnExpr' (snd arg_1__)) }
obligations Core.collectAnnBndrs solve_collectAnnArgsTicks

# skip Core.mkTyArg

rewrite forall x, Type.isCoercionTy_maybe x = None


