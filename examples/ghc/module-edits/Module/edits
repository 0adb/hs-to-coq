skip module Config
skip module GHC.IO
skip module System.FilePath.Posix


# IO.FilePath
skip Module.addBootSuffix
skip Module.addBootSuffix_maybe
skip Module.ml_hi_file
skip Module.ml_hs_file
skip Module.ml_obj_file
skip Module.addBootSuffixLocn

# outputtable
skip Module.pprModuleName
skip Module.pprPackagePrefix
skip Module.pprModule

# (should be) in midamble
skip Module.moduleNameSlashes
skip Module.mkModuleName



order Module.Eq___UnitId Module.Eq___ModuleName Module.Eq___Module_op_zeze__ Module.Eq___Module_op_zsze__ Module.Eq___Module Module.Eq___NDModule_op_zeze__ Module.Eq___NDModule_op_zsze__ Module.Eq___NDModule Module.Ord__UnitId Module.Ord__ModuleName Module.Ord__Module_compare Module.Ord__Module_op_zg__ Module.Ord__Module_op_zgze__ Module.Ord__Module_op_zl__ Module.Ord__Module_op_zlze__ Module.Ord__Module Module.Ord__NDModule


# These are wrong, but when axiomatizing, we cannot put them in order
# And it is a real pain to put them in the correct order when we are
# not axiomatizing
redefine Local Definition Module.Ord__ModuleName_compare :
   ModuleName -> (ModuleName -> comparison) := fun nm1 nm2 => Eq.
redefine Local Definition Module.Ord__UnitId_compare :
   UnitId -> (UnitId -> comparison) := fun nm1 nm2 => Eq.

# Uses Config.cIntegerLibraryType
redefine Definition Module.integerUnitId : UnitId := default.

# These definitions make the wrong guesses
redefine Local Definition Module.Ord__Module_op_zg__ : Module -> (Module -> bool) :=
  fun a b =>
    match a with
    | Mk_Module a1 a2 => match b with
                        | Mk_Module b1 b2 =>
                                            match (Ord__UnitId_compare a1 b1) with
                                            | Lt => false
                                            | Eq => (a2 GHC.Base.> b2)
                                            | Gt => true
                                            end
                        end
    end.

redefine Local Definition Module.Ord__Module_op_zgze__ : Module -> (Module -> bool) :=
  fun a b =>
    match a with
      | Mk_Module a1 a2 => match b with
                             | Mk_Module b1 b2 =>
                                                  match (Ord__UnitId_compare a1 b1) with
                                                    | Lt => false
                                                    | Eq => (a2 GHC.Base.>= b2)
                                                    | Gt => true
                                                  end
                           end
    end.

redefine Local Definition Module.Ord__Module_op_zl__ : Module -> (Module -> bool) :=
  fun a b =>
    match a with
      | Mk_Module a1 a2 => match b with
                             | Mk_Module b1 b2 =>
                                                  match (Ord__UnitId_compare a1 b1)  with
                                                    | Lt => true
                                                    | Eq => (a2 GHC.Base.< b2)
                                                    | Gt => false
                                                  end
                           end
    end.

redefine Local Definition Module.Ord__Module_op_zlze__ : Module -> (Module -> bool) :=
  fun a b =>
    match a with
      | Mk_Module a1 a2 => match b with
                             | Mk_Module b1 b2 =>
                                                  match (Ord__UnitId_compare a1 b1) with
                                                    | Lt => true
                                                    | Eq => (a2 GHC.Base.<= b2)
                                                    | Gt => false
                                                  end
                           end
    end.
