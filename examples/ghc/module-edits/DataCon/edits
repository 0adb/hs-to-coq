axiomatize module DataCon

# pun
rename value DataCon.HsSrcBang = DataCon.Mk_HsSrcBang
rename value DataCon.EqSpec    = DataCon.Mk_EqSpec

# do this at toplevel?
rename value Outputable.<+> = GHC.Base.mappend

# no Word8
skip DataCon.dataConIdentity

# skip MkId
rename type MkId.DataConBoxer = unit

# bruttaly skipping all type info
rename type TyCoRep.Coercion  = unit
rename type TyCoRep.Type_     = unit
rename type TyCoRep.ThetaType = unit
rename type TyCoRep.TyBinder  = unit
rename type TyCoRep.TyThing   = unit
rename type TyCon.TyCon       = unit

# skipped fcns as a result of above
#skip DataCon.dataConRepArgTys
# generally these fcns return units so are easy to replace
#not skipping b/c we axiomatized this module
#skip DataCon.buildAlgTyCon
#skip DataCon.classDataCon
#skip DataCon.dataFieldType
#skip DataCon.dataConImplicitTyThings
#skip DataCon.dataConInstOrigArgTys
#skip DataCon.dataConOrigTyCon
#skip DataCon.dataConInstArgTys
#skip DataCon.splitDataProductType_maybe
#skip DataCon.dataConRepRepArity
#skip DataCon.specialPromotedDc
#skip DataCon.eqSpecPreds
#skip DataCon.dataConTheta

skip module CoAxiom
skip module Coercion
skip module ForeignCall
skip module ListSetOps
skip module TyCoRep
skip module TyCon
skip module Type
skip module TysWiredIn
skip module Unify
