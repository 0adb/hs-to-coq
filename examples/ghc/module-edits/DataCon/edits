
# redefine Inductive DataCon.HsImplBang : Type := .
# redefine Inductive DataCon.EqSpec     : Type := .
# redefine Inductive DataCon.DataConRep : Type := .
# redefine Inductive DataCon.DataCon    : Type := .

# no Word8
skip DataCon.dataConIdentity

# skipped fcns as a result of eliminating type information
# generally these fcns return units so are easy to replace

skip DataCon.dataConRepArgTys
skip DataCon.buildAlgTyCon
skip DataCon.classDataCon
skip DataCon.dataFieldType
skip DataCon.dataConImplicitTyThings
skip DataCon.dataConInstOrigArgTys
skip DataCon.dataConOrigTyCon
skip DataCon.dataConInstArgTys
skip DataCon.splitDataProductType_maybe
skip DataCon.dataConRepRepArity
skip DataCon.specialPromotedDc
skip DataCon.eqSpecPreds
skip DataCon.dataConTheta


# still refer to TyCoRep
skip DataCon.dataConCanotMatch
skip DataCon.dataConExTyBinders
skip DataCon.dataConExTyVars
skip DataCon.dataConFieldLabels
skip DataCon.dataConFieldType
skip DataCon.dataConOrigArgTys
skip DataCon.dataConOrigResTy
skip DataCon.dataConInstSig

skip DataCon.dataConCannotMatch

skip DataCon.buildSynTyCon
skip DataCon.dataConRepStrictness
skip DataCon.dataConSig
skip DataCon.dataConUserType
skip DataCon.eqHsBang

skip DataCon.mkDataCon
skip DataCon.isLegacyPromotableDataCon
skip DataCon.isLegacyPromotableTyCon
skip DataCon.dataConEqSpec
skip DataCon.substEqSpec 

#
# uses enumFrom
skip DataCon.freshNames
skip DataCon.mkCleanAnonTyConBinders

#
# Outputable.$$
rewrite forall x y, x Outputable.$$ y = x
rewrite forall x, Type.mkInvForAllTys x y = tt


