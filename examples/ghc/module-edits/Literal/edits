# just to access type info
skip Literal.literalType
skip Literal.absentLiteralOf

## declared as a parameter in the midamble.
# is a list of specific prelude names
skip Literal.absent_lits
# needs Constants module
skip Literal.inCharRange

# needs Real.FrealFral Real.Rational
skip Literal.double2IntLit
skip Literal.float2IntLit

# debugging strings, grr!
skip Literal.mkMachInt
skip Literal.mkMachWord

# types we don't fully support (yet)
skip Literal.narrow16IntLit
skip Literal.narrow16WordLit
skip Literal.narrow32IntLit
skip Literal.narrow32WordLit
skip Literal.narrow8IntLit
skip Literal.narrow8WordLit

# ppr
skip Literal.pprIntegerVal
skip Literal.pprLiteral

# literal Eq defined in terms of ord
order Literal.cmpLit Literal.Eq___Literal_op_zeze__ Literal.Eq___Literal_op_zsze__
order Literal.Eq___Literal Literal.Ord__Literal

redefine Local Definition Literal.Eq___Literal_op_zeze__ : Literal -> (Literal -> bool) :=
  fun a b =>
    match cmpLit a b with
      | Eq => true
      | _ => false
    end.

redefine Local Definition Literal.Eq___Literal_op_zsze__ : Literal -> (Literal -> bool) :=
  fun a b =>
    match cmpLit a b with
      | Eq => false
      | _ => true
    end.
