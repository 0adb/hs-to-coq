# This module depends strongly on Type/Coercion/TyCoRep/TyCon
# in order to determine the arity of some of the operations
#

axiomatize module CoreArity

# add CoreArity Axiom CoreArity.isDictLikeTy : unit -> bool.
# rename value Type.isDictLikeTy = CoreArity.isDictLikTy

# axiomatize definition CoreArity.typeArity
# axiomatize definition CoreArity.pushCoercion
# axiomatize definition CoreArity.freshEtaId
# axiomatize definition CoreArity.mkEtaWW
# axiomatize definition CoreArity.etaInfoAppTy
# axiomatize definition CoreArity.etaBodyForJoinPoint

# in CoreArity.exprArity rewrite forall p, (Pair.pSnd p) = tt
# in CoreArity.arityType rewrite forall p, (Pair.pSnd p) = tt

# in CoreArity.etaInfoAbs rewrite forall co, Coercion.mkSymCo co = tt

# in CoreArity.etaExpandToJoinPoint termination go deferred

# rewrite forall x s y z, Panic.warnPprTrace x s y z = z