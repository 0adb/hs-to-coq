skip module	FamInstEnv

## 
# NEEDED by Exitify
# CoreFVs.CoreExprWithFVs CoreFVs.freeVars
# CoreFVs.freeVarsOf
#
# NEEDED from Id
# Id.idCoreRules Id.idSpecialisation Id.realIdUnfolding
#

# notation
rename type CoreSyn.AnnExpr = AnnExpr
rename type CoreSyn.AnnAlt  = AnnAlt

#
# TODO: we don't try to translate the orphNames functions
#
skip CoreFVs.orphNamesOfFamInst  # needs FamInstEnv
skip CoreFVs.orphNamesOfCoCon
skip CoreFVs.orphNamesOfCoAxBranch
skip CoreFVs.orphNamesOfType
skip CoreFVs.orphNamesOfProv
skip CoreFVs.orphNamesOfCoAxBranches
skip CoreFVs.orphNamesOfTypes
skip CoreFVs.orphNamesOfAxiom
skip CoreFVs.orphNamesOfCos
skip CoreFVs.orphNamesOfTyCon
skip CoreFVs.orphNamesOfCo
## mutual recursion 
skip CoreFVs.exprOrphNames
skip CoreFVs.exprsOrphNames

#
# These edits are due to the fact that Id's are missing information
# We assume that the missing information does not contain any free variables
#
#
redefine Definition CoreFVs.idRuleFVs : Var.Id -> FV.FV := fun id => FV.emptyFV.
redefine Definition CoreFVs.varTypeTyCoFVs : Var.Var -> FV.FV := fun var => FV.emptyFV.
redefine Definition CoreFVs.idUnfoldingFVs : Var.Id -> FV.FV := fun id => FV.emptyFV.

rewrite forall co,   TyCoRep.tyCoFVsOfCo co          = FV.emptyFV
rewrite forall ty,   TyCoRep.tyCoFVsOfType ty        = FV.emptyFV
rewrite forall b_ty, TyCoRep.tyCoVarsOfTypeDSet b_ty = VarSet.emptyDVarSet
rewrite forall co,   TyCoRep.tyCoVarsOfCoDSet co     = VarSet.emptyDVarSet

in CoreFVs.idRuleRhsVars rewrite forall get_fvs id, VarSet.mapUnionVarSet get_fvs (Id.idCoreRules id) =  VarSet.emptyVarSet


#
# expr_fvs
#
#
termination CoreFVs.expr_fvs deferred
#
# TODO: The measure-base termination message produces this error:
# (* Translating `expr_fvs' failed: Could not apply edit: cannot peel off argument
#    type off Qualid (Qualified "FV" "FV") *)
# termination CoreFVs.expr_fvs { measure (CoreSyn.size_AnnExpr' arg_0__)}
#
# ANTALZ: mutual recursion (non structural)
# 
in CoreFVs.expr_fvs rewrite forall, CoreFVs.rhs_fvs = CoreFVs.rhs_fvs1


#
# freeVars
#
# magic rewrite to make CoreFVs.freeVars to be structurally recursive
in CoreFVs.freeVars rewrite forall fv_alt alts, Util.mapAndUnzip fv_alt alts = GHC.List.unzip (Lists.List.map fv_alt alts)
#
# ANTALSZ: mutual recursion still needs to be addressed
in CoreFVs.freeVars rewrite forall, CoreFVs.freeVarsBind = CoreFVs.freeVarsBind1




