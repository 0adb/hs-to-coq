# This version of the core edit files axiomatizes types
#

skip module Unify
skip module TcType
skip module RepType
skip module ForeignCall
skip module	FamInstEnv
skip module PprCore
skip module Data.ByteString
skip module ErrUtils
skip module OccurAnal
skip module CostCentre
skip module PrimOp
skip module TysPrim
skip module Platform


####################################################
## Most of the time, we are counting 

rename type GHC.Num.Int = nat

rewrite forall, Data.Foldable.length       = Coq.Lists.List.length
rewrite forall x y, GHC.List.replicate x y = Coq.Lists.List.repeat y x
rewrite forall x, GHC.List.take x          = Coq.Lists.List.firstn x
rewrite forall x, GHC.List.drop x          = Coq.Lists.List.skipn x


####################################################
## Glueing together the Core
####################################################

#
# This must stay in sync with the Makefile
#
rename module Class   Core
rename module TyCon   Core
rename module DataCon Core
rename module Var     Core
rename module IdInfo  Core
rename module PatSyn  Core
rename module VarSet  Core
rename module VarEnv  Core
rename module CoreSyn Core
rename module Demand  Core

#
# Punned constructor values (in Core)
#
rename value DataCon.HsSrcBang  = Core.Mk_HsSrcBang
rename value DataCon.EqSpec     = Core.Mk_EqSpec
rename value Class.Class        = Core.Mk_Class
rename value Var.Id             = Core.Mk_Id
rename value Var.TyVar          = Core.Mk_TyVar
rename value Var.TcTyVar        = Core.Mk_TcTyVar
rename value IdInfo.IdInfo      = Core.Mk_IdInfo
rename value IdInfo.DFunId      = Core.Mk_DFunId
rename value IdInfo.JoinId      = Core.Mk_JoinId
rename value CoreSyn.Var        = Core.Mk_Var
rename value CoreSyn.IsOrphan   = Core.Mk_IsOrphan
rename value CoreSyn.RuleEnv    = Core.Mk_RuleEnv
rename value Demand.ExnStr      = Core.Mk_ExnStr
rename value Demand.Str         = Core.Mk_Str
rename value Demand.Use         = Core.Mk_Use
rename value Demand.DmdType     = Core.Mk_DmdType
rename value Demand.StrictSig   = Core.Mk_StrictSig
rename value Demand.KillFlags   = Core.Mk_KillFlags

## Other punning

rename value CoreFVs.FVAnn    = CoreFVs.Mk_FVAnn
rename value CoreSubst.Subst  = CoreSubst.Mk_Subst

###############################################################################
#  General edits related to translating Core
###############################################################################

## Outputtable
rewrite forall x, Core.pprIdDetails x = Panic.someSDoc
## CallStack 
rewrite forall x, Core.idInfo x = @Core.idInfo tt x

rename type GHC.Stack.Types.HasCallStack = Util.HasDebugCallStack

###############################################################################
#  Pruning the AST, general
###############################################################################

#
# we never use any operations on these types, so perfectly sound to forget
# they exist. Could also axiomatize, but then would need to add Default/Eq
# instances for them too.
#
rename type PrimOp.PrimOp           = unit
rename type ForeignCall.ForeignCall = unit
rename type ForeignCall.CType       = unit
rename type CostCentre.CostCentre   = unit

# used in DataCon
rename type MkId.DataConBoxer       = unit

###############################################################################
# axiomatize type & coercion information
#  - define types in a new (manual) module called AxiomatizedTypes
#     (we cannot axiomatize the modules and include them in Core at the same time)
#  - rewrite refererences to these types to new module
#  - operations on the axiomatized types mostly stay in original modules, 
#    (TyCoRep, CoAxiom, Coercion) but are axiomatized. These can depend on Core
#  - a few types and operations are needed in Core, so we add axioms for them 
#    there, and rewrites to the new locations
###############################################################################

axiomatize module TyCoRep
axiomatize module CoAxiom
axiomatize module Coercion

rename module Type Type_
axiomatize module Type

#
# axiomatized types
#
rename type TcType.TcTyVarDetails = AxiomatizedTypes.TcTyVarDetails

rename type TyCoRep.Coercion      = AxiomatizedTypes.Coercion
rename type TyCoRep.Type_         = AxiomatizedTypes.Type_
rename type TyCoRep.ThetaType     = AxiomatizedTypes.ThetaType
rename type TyCoRep.TyBinder      = AxiomatizedTypes.TyBinder
rename type TyCoRep.TyThing       = AxiomatizedTypes.TyThing
rename type TyCoRep.Kind          = AxiomatizedTypes.Kind
rename type TyCoRep.PredType      = AxiomatizedTypes.PredType

rename type CoAxiom.CoAxiom            = AxiomatizedTypes.CoAxiom
rename type CoAxiom.Branched           = AxiomatizedTypes.Branched
rename type CoAxiom.Unbranched         = AxiomatizedTypes.Unbranched
rename type CoAxiom.BuiltInSynFamily   = AxiomatizedTypes.BuiltInSynFamily
rename type CoAxiom.Role               = AxiomatizedTypes.Role
rename value CoAxiom.Representational  = AxiomatizedTypes.Representational
rename value CoAxiom.Nominal           = AxiomatizedTypes.Nominal

#
# types moved to core (concrete definitions)
#
add Core Definition Core.TvSubstEnv := Core.TyVarEnv AxiomatizedTypes.Type_.
rename type TyCoRep.TvSubstEnv    = Core.TvSubstEnv
add Core Definition Core.CvSubstEnv := Core.CoVarEnv AxiomatizedTypes.Coercion.
rename type TyCoRep.CvSubstEnv    = Core.CvSubstEnv
add Core Inductive Core.TCvSubst := Core.Mk_TCvSubst : Core.InScopeSet -> (Core.TvSubstEnv -> (Core.CvSubstEnv -> Core.TCvSubst)).
rename type TyCoRep.TCvSubst      = Core.TCvSubst
rename value TyCoRep.TCvSubst     = Core.Mk_TCvSubst

#
# Coercion/TyCoRep operations needed in Core
#

add Core Axiom Core.mkCoVarCo : Core.CoVar -> AxiomatizedTypes.Coercion.
rename value Coercion.mkCoVarCo = Core.mkCoVarCo

add Core Axiom Core.mkTyVarTy : Core.TyVar -> AxiomatizedTypes.Type_.
rename value TyCoRep.mkTyVarTy = Core.mkTyVarTy

#
# must move everything in Type that we need to Core because we cannot rename/axiomatize 
#
add Core Axiom Core.isCoercionTy_maybe : AxiomatizedTypes.Type_ -> option AxiomatizedTypes.Coercion.
rename value Type.isCoercionTy_maybe = Core.isCoercionTy_maybe

add Core Axiom Core.resultIsLevPoly : AxiomatizedTypes.Type_ -> bool.
rename value Type.resultIsLevPoly = Core.resultIsLevPoly

add Core Axiom Core.isUnliftedType :  AxiomatizedTypes.Type_ -> bool.
rename value Type.isUnliftedType = Core.isUnliftedType

add Core Axiom Core.eqTypeX : Core.RnEnv2 -> (AxiomatizedTypes.Type_ -> (AxiomatizedTypes.Type_ -> bool)).
rename value Type.eqTypeX = Core.eqTypeX

add Core Axiom Core.typeKind :  AxiomatizedTypes.Type_ -> AxiomatizedTypes.Kind.
rename value Type.typeKind = Core.typeKind

add Core Axiom Core.tyConAppArgs : AxiomatizedTypes.Type_ -> list (AxiomatizedTypes.Type_).
rename value Type.tyConAppArgs = Core.tyConAppArgs

#
# not translating TysWiredIn yet
#

add Core Axiom Core.liftedTypeKind : AxiomatizedTypes.Kind.
rename value TysWiredIn.liftedTypeKind = Core.liftedTypeKind

add Core Axiom Core.constraintKind : AxiomatizedTypes.Kind.
rename value TysWiredIn.constraintKind = Core.constraintKind


###############################################################################
# rewrites for type/corecion related operations defined in skipped modules
##############################################################################

# DataCon
# This relies on Unify.typesCantMatch as well as several operations from Type
axiomatize definition Core.dataConCannotMatch

############################################################################
# rewrites for type/corecion related operations defined in translated modules
############################################################################


#
# These are wrong, but important for our proofs
#
#
rewrite forall co,     TyCoRep.tyCoFVsOfCo co          = FV.emptyFV
rewrite forall ty,     TyCoRep.tyCoFVsOfType ty        = FV.emptyFV
rewrite forall b_ty,   TyCoRep.tyCoVarsOfTypeDSet b_ty = Core.emptyDVarSet
rewrite forall co,     TyCoRep.tyCoVarsOfCoDSet co     = Core.emptyDVarSet

############################################################################
# pruning Rules and Unfolding
############################################################################

redefine Definition    CoreFVs.idRuleFVs      : Core.Id  -> FV.FV := fun id  => FV.emptyFV.
redefine Definition    CoreFVs.idUnfoldingFVs : Core.Id  -> FV.FV := fun id  => FV.emptyFV.
