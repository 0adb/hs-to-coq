skip module Data.Word
skip module Utility

rename type Utility.MachineInt = Coq.ZArith.BinInt.Z

skip Decode.Eq___InstructionI
skip Decode.Eq___InstructionM
skip Decode.Eq___InstructionM64
skip Decode.Eq___InstructionI64
skip Decode.Eq___InstructionCSR
skip Decode.Eq___Instruction

skip Decode.rd
skip Decode.rs1
skip Decode.rs2
skip Decode.oimm12
skip Decode.imm12
skip Decode.sbimm12
skip Decode.simm12
skip Decode.shamt5
skip Decode.shamt6
skip Decode.pred
skip Decode.succ
skip Decode.csr12
skip Decode.zimm
skip Decode.csrInstruction
skip Decode.i64Instruction
skip Decode.iInstruction
skip Decode.m64Instruction
skip Decode.mInstruction

rename value Data.Bits.shift = Coq.ZArith.BinInt.Z.shiftl
rename value Data.Bits..|. = Coq.ZArith.BinInt.Z.lor
rewrite forall x y, x GHC.Base.== y = Coq.ZArith.BinInt.Z.eqb x y

rewrite forall x, GHC.Num.fromInteger x = x
rewrite forall x y, (x GHC.Real.^ y) = Coq.ZArith.BinInt.Z.pow x y

rewrite forall, Utility.bitSlice = GHC.Err.undefined

# A work-around (Z is used like a module, but cannot be Require Importâ€™ed)
skip module Coq.ZArith.BinInt.Z

# order Decode.Eq___InstructionI Decode.Eq___InstructionM Decode.Eq___InstructionI64 Decode.Eq___InstructionM64 Decode.Eq___InstructionCSR Decode.Eq___Instruction_op_zeze__
