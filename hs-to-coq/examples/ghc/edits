#####################################################################
# for Bag

skip module Outputable
skip module Util
skip module Data.Data
skip module Data.List

# Needs Data.Traversable.mapAccumL
skip mapAccumBagL

# Needs MonadUtil.mapAccumLM
skip mapAccumBagLM

# Needs Util.partitionWith
skip partitionBagWith

# Needs Util.isSingleton
skip isSingletonBag

skip instance_forall___Data_Data_Data_a___Data_Data_Data__Bag_a_
skip instance_forall____Outputable_Outputable_a____Outputable_Outputable__Bag_a_

skip instance_Data_Foldable_Foldable_Bag # still produces Admitted

####################################################################
# for MonadUtils

skip module Control.Monad.Fix
skip module Control.Monad.IO.Class

# partial
skip unlessM

# needs traversable
skip concatMapM
skip mapMaybeM

skip liftIO1
skip liftIO2
skip liftIO3
skip liftIO4

# UNDEFINED EVARS
skip mapAccumLM
skip mapAndUnzip3M
skip mapAndUnzip4M
skip mapAndUnzip5M
skip zipWithAndUnzipM
